/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,r={448:(e,t,r)=>{var n=r(294),o=r(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,r,n){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0!==o.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),x=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),O=Symbol.for("react.profiler"),N=Symbol.for("react.provider"),L=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),_=Symbol.for("react.suspense_list"),C=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var I,U=Object.assign;function D(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var z=!1;function M(e,t){if(!e||z)return"";z=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=n.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?D(e):""}function B(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case O:return"Profiler";case k:return"StrictMode";case j:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case L:return(e.displayName||"Context")+".Consumer";case N:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case C:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case T:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function V(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=H(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var r=t.checked;return U({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function K(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=W(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function J(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){J(e,t);var r=W(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,r):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function ee(e,t,r){"number"===t&&Q(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var te=Array.isArray;function re(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+W(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return U({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(a(92));if(te(r)){if(1<r.length)throw Error(a(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:W(r)}}function ae(e,t){var r=W(t.value),n=W(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=me(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=U({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Se=null,ke=null;function Oe(e){if(e=wo(e)){if("function"!=typeof xe)throw Error(a(280));var t=e.stateNode;t&&(t=xo(t),xe(e.stateNode,e.type,t))}}function Ne(e){Se?ke?ke.push(e):ke=[e]:Se=e}function Le(){if(Se){var e=Se,t=ke;if(ke=Se=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Pe(e,t){return e(t)}function je(){}var _e=!1;function Ce(e,t,r){if(_e)return e(t,r);_e=!0;try{return Pe(e,t,r)}finally{_e=!1,(null!==Se||null!==ke)&&(je(),Le())}}function Te(e,t){var r=e.stateNode;if(null===r)return null;var n=xo(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(a(231,t,typeof r));return r}var Ae=!1;if(s)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(se){Ae=!1}function Fe(e,t,r,n,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var Ie=!1,Ue=null,De=!1,ze=null,Me={onError:function(e){Ie=!0,Ue=e}};function Be(e,t,r,n,o,a,i,l,u){Ie=!1,Ue=null,Fe.apply(Me,arguments)}function Ge(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ge(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(n=o.return)){r=n;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===r)return We(o),e;if(i===n)return We(o),t;i=i.sibling}throw Error(a(188))}if(r.return!==n.return)r=o,n=i;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=i;break}if(u===n){l=!0,n=o,r=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===r){l=!0,r=i,n=o;break}if(u===n){l=!0,n=i,r=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(r.alternate!==n)throw Error(a(190))}if(3!==r.tag)throw Error(a(188));return r.stateNode.current===r?e:t}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ve(e);if(null!==t)return t;e=e.sibling}return null}var qe=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Je=o.unstable_now,Xe=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,rt=o.unstable_LowPriority,nt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var r=e.pendingLanes;if(0===r)return 0;var n=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&r;if(0!==i){var l=i&~o;0!==l?n=ft(l):0!=(a&=i)&&(n=ft(a))}else 0!=(i=r&~o)?n=ft(i):0!==a&&(n=ft(a));if(0===n)return 0;if(0!==t&&t!==n&&0==(t&o)&&((o=n&-n)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&n)&&(n|=16&r),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-it(t)),n|=e[r],t&=~o;return n}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function yt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function vt(e,t,r){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=r}function gt(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-it(r),o=1<<n;o&t|e[n]&t&&(e[n]|=t),r&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Et,xt,St,kt,Ot,Nt=!1,Lt=[],Pt=null,jt=null,_t=null,Ct=new Map,Tt=new Map,At=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ft(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":jt=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":Ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function It(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&xt(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Ut(e){var t=bo(e.target);if(null!==t){var r=Ge(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=$e(r)))return e.blockedOn=t,void Ot(e.priority,(function(){St(r)}))}else if(3===t&&r.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=wo(r))&&xt(t),e.blockedOn=r,!1;var n=new(r=e.nativeEvent).constructor(r.type,r);we=n,r.target.dispatchEvent(n),we=null,t.shift()}return!0}function zt(e,t,r){Dt(e)&&r.delete(t)}function Mt(){Nt=!1,null!==Pt&&Dt(Pt)&&(Pt=null),null!==jt&&Dt(jt)&&(jt=null),null!==_t&&Dt(_t)&&(_t=null),Ct.forEach(zt),Tt.forEach(zt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Nt||(Nt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Mt)))}function Gt(e){function t(t){return Bt(t,e)}if(0<Lt.length){Bt(Lt[0],e);for(var r=1;r<Lt.length;r++){var n=Lt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==jt&&Bt(jt,e),null!==_t&&Bt(_t,e),Ct.forEach(t),Tt.forEach(t),r=0;r<At.length;r++)(n=At[r]).blockedOn===e&&(n.blockedOn=null);for(;0<At.length&&null===(r=At[0]).blockedOn;)Ut(r),null===r.blockedOn&&At.shift()}var $t=w.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,r,n){var o=bt,a=$t.transition;$t.transition=null;try{bt=1,qt(e,t,r,n)}finally{bt=o,$t.transition=a}}function Vt(e,t,r,n){var o=bt,a=$t.transition;$t.transition=null;try{bt=4,qt(e,t,r,n)}finally{bt=o,$t.transition=a}}function qt(e,t,r,n){if(Wt){var o=Yt(e,t,r,n);if(null===o)Wn(e,t,n,Qt,r),Ft(e,n);else if(function(e,t,r,n,o){switch(t){case"focusin":return Pt=It(Pt,e,t,r,n,o),!0;case"dragenter":return jt=It(jt,e,t,r,n,o),!0;case"mouseover":return _t=It(_t,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return Ct.set(a,It(Ct.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,Tt.set(a,It(Tt.get(a)||null,e,t,r,n,o)),!0}return!1}(o,e,t,r,n))n.stopPropagation();else if(Ft(e,n),4&t&&-1<Rt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&Et(a),null===(a=Yt(e,t,r,n))&&Wn(e,t,n,Qt,r),a===o)break;o=a}null!==o&&n.stopPropagation()}else Wn(e,t,n,null,r)}}var Qt=null;function Yt(e,t,r,n){if(Qt=null,null!==(e=bo(e=Ee(n))))if(null===(t=Ge(e)))e=null;else if(13===(r=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===r){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case rt:return 16;case nt:return 536870912;default:return 16}default:return 16}}var Jt=null,Xt=null,Zt=null;function er(){if(Zt)return Zt;var e,t,r=Xt,n=r.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rr(){return!0}function nr(){return!1}function or(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rr:nr,this.isPropagationStopped=nr,this}return U(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rr)},persist:function(){},isPersistent:rr}),t}var ar,ir,lr,ur={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cr=or(ur),sr=U({},ur,{view:0,detail:0}),fr=or(sr),dr=U({},sr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lr&&(lr&&"mousemove"===e.type?(ar=e.screenX-lr.screenX,ir=e.screenY-lr.screenY):ir=ar=0,lr=e),ar)},movementY:function(e){return"movementY"in e?e.movementY:ir}}),pr=or(dr),hr=or(U({},dr,{dataTransfer:0})),mr=or(U({},sr,{relatedTarget:0})),yr=or(U({},ur,{animationName:0,elapsedTime:0,pseudoElement:0})),vr=U({},ur,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),gr=or(vr),br=or(U({},ur,{data:0})),wr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Er={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xr[e])&&!!t[e]}function kr(){return Sr}var Or=U({},sr,{key:function(e){if(e.key){var t=wr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Er[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kr,charCode:function(e){return"keypress"===e.type?tr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nr=or(Or),Lr=or(U({},dr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=or(U({},sr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kr})),jr=or(U({},ur,{propertyName:0,elapsedTime:0,pseudoElement:0})),_r=U({},dr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Cr=or(_r),Tr=[9,13,27,32],Ar=s&&"CompositionEvent"in window,Rr=null;s&&"documentMode"in document&&(Rr=document.documentMode);var Fr=s&&"TextEvent"in window&&!Rr,Ir=s&&(!Ar||Rr&&8<Rr&&11>=Rr),Ur=String.fromCharCode(32),Dr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Tr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Mr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Br=!1,Gr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $r(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Gr[e.type]:"textarea"===t}function Wr(e,t,r,n){Ne(n),0<(t=Vn(t,"onChange")).length&&(r=new cr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Hr=null,Vr=null;function qr(e){Dn(e,0)}function Qr(e){if(q(Eo(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(s){var Jr;if(s){var Xr="oninput"in document;if(!Xr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Xr="function"==typeof Zr.oninput}Jr=Xr}else Jr=!1;Kr=Jr&&(!document.documentMode||9<document.documentMode)}function en(){Hr&&(Hr.detachEvent("onpropertychange",tn),Vr=Hr=null)}function tn(e){if("value"===e.propertyName&&Qr(Vr)){var t=[];Wr(t,Vr,e,Ee(e)),Ce(qr,t)}}function rn(e,t,r){"focusin"===e?(en(),Vr=r,(Hr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qr(Vr)}function on(e,t){if("click"===e)return Qr(t)}function an(e,t){if("input"===e||"change"===e)return Qr(t)}var ln="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function un(e,t){if(ln(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var o=r[n];if(!f.call(t,o)||!ln(e[o],t[o]))return!1}return!0}function cn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sn(e,t){var r,n=cn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=cn(n)}}function fn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dn(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=Q((e=t.contentWindow).document)}return t}function pn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hn(e){var t=dn(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&fn(r.ownerDocument.documentElement,r)){if(null!==n&&pn(r))if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if((e=(t=r.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=r.textContent.length,a=Math.min(n.start,o);n=void 0===n.end?a:Math.min(n.end,o),!e.extend&&a>n&&(o=n,n=a,a=o),o=sn(r,a);var i=sn(r,n);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>n?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=r;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<t.length;r++)(e=t[r]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mn=s&&"documentMode"in document&&11>=document.documentMode,yn=null,vn=null,gn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==yn||yn!==Q(n)||(n="selectionStart"in(n=yn)&&pn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},gn&&un(gn,n)||(gn=n,0<(n=Vn(vn,"onSelect")).length&&(t=new cr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=yn)))}function En(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var xn={animationend:En("Animation","AnimationEnd"),animationiteration:En("Animation","AnimationIteration"),animationstart:En("Animation","AnimationStart"),transitionend:En("Transition","TransitionEnd")},Sn={},kn={};function On(e){if(Sn[e])return Sn[e];if(!xn[e])return e;var t,r=xn[e];for(t in r)if(r.hasOwnProperty(t)&&t in kn)return Sn[e]=r[t];return e}s&&(kn=document.createElement("div").style,"AnimationEvent"in window||(delete xn.animationend.animation,delete xn.animationiteration.animation,delete xn.animationstart.animation),"TransitionEvent"in window||delete xn.transitionend.transition);var Nn=On("animationend"),Ln=On("animationiteration"),Pn=On("animationstart"),jn=On("transitionend"),_n=new Map,Cn="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tn(e,t){_n.set(e,t),u(t,[e])}for(var An=0;An<Cn.length;An++){var Rn=Cn[An];Tn(Rn.toLowerCase(),"on"+(Rn[0].toUpperCase()+Rn.slice(1)))}Tn(Nn,"onAnimationEnd"),Tn(Ln,"onAnimationIteration"),Tn(Pn,"onAnimationStart"),Tn("dblclick","onDoubleClick"),Tn("focusin","onFocus"),Tn("focusout","onBlur"),Tn(jn,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Fn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),In=new Set("cancel close invalid load scroll toggle".split(" ").concat(Fn));function Un(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,i,l,u,c){if(Be.apply(this,arguments),Ie){if(!Ie)throw Error(a(198));var s=Ue;Ie=!1,Ue=null,De||(De=!0,ze=s)}}(n,t,void 0,e),e.currentTarget=null}function Dn(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Un(o,l,c),a=u}else for(i=0;i<n.length;i++){if(u=(l=n[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Un(o,l,c),a=u}}}if(De)throw e=ze,De=!1,ze=null,e}function zn(e,t){var r=t[yo];void 0===r&&(r=t[yo]=new Set);var n=e+"__bubble";r.has(n)||($n(t,e,2,!1),r.add(n))}function Mn(e,t,r){var n=0;t&&(n|=4),$n(r,e,n,t)}var Bn="_reactListening"+Math.random().toString(36).slice(2);function Gn(e){if(!e[Bn]){e[Bn]=!0,i.forEach((function(t){"selectionchange"!==t&&(In.has(t)||Mn(t,!1,e),Mn(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Bn]||(t[Bn]=!0,Mn("selectionchange",!1,t))}}function $n(e,t,r,n){switch(Kt(t)){case 1:var o=Ht;break;case 4:o=Vt;break;default:o=qt}r=o.bind(null,t,r,e),o=void 0,!Ae||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Wn(e,t,r,n,o){var a=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){n=a=i;continue e}l=l.parentNode}}n=n.return}Ce((function(){var n=a,o=Ee(r),i=[];e:{var l=_n.get(e);if(void 0!==l){var u=cr,c=e;switch(e){case"keypress":if(0===tr(r))break e;case"keydown":case"keyup":u=Nr;break;case"focusin":c="focus",u=mr;break;case"focusout":c="blur",u=mr;break;case"beforeblur":case"afterblur":u=mr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pr;break;case Nn:case Ln:case Pn:u=yr;break;case jn:u=jr;break;case"scroll":u=fr;break;case"wheel":u=Cr;break;case"copy":case"cut":case"paste":u=gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Lr}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=n;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Te(h,d))&&s.push(Hn(h,m,p))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,r,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||r===we||!(c=r.relatedTarget||r.fromElement)||!bo(c)&&!c[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=n,null!==(c=(c=r.relatedTarget||r.toElement)?bo(c):null)&&(c!==(f=Ge(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=n),u!==c)){if(s=pr,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Lr,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:Eo(u),p=null==c?l:Eo(c),(l=new s(m,h+"leave",u,r,o)).target=f,l.relatedTarget=p,m=null,bo(o)===n&&((s=new s(d,h+"enter",c,r,o)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=qn(p))h++;for(p=0,m=d;m;m=qn(m))p++;for(;0<h-p;)s=qn(s),h--;for(;0<p-h;)d=qn(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=qn(s),d=qn(d)}s=null}else s=null;null!==u&&Qn(i,l,u,s,!1),null!==c&&null!==f&&Qn(i,f,c,s,!0)}if("select"===(u=(l=n?Eo(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=Yr;else if($r(l))if(Kr)y=an;else{y=nn;var v=rn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=on);switch(y&&(y=y(e,n))?Wr(i,y,r,o):(v&&v(e,l,n),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=n?Eo(n):window,e){case"focusin":($r(v)||"true"===v.contentEditable)&&(yn=v,vn=n,gn=null);break;case"focusout":gn=vn=yn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,o);break;case"selectionchange":if(mn)break;case"keydown":case"keyup":wn(i,r,o)}var g;if(Ar)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Br?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Ir&&"ko"!==r.locale&&(Br||"onCompositionStart"!==b?"onCompositionEnd"===b&&Br&&(g=er()):(Xt="value"in(Jt=o)?Jt.value:Jt.textContent,Br=!0)),0<(v=Vn(n,b)).length&&(b=new br(b,e,null,r,o),i.push({event:b,listeners:v}),(g||null!==(g=Mr(r)))&&(b.data=g))),(g=Fr?function(e,t){switch(e){case"compositionend":return Mr(t);case"keypress":return 32!==t.which?null:(Dr=!0,Ur);case"textInput":return(e=t.data)===Ur&&Dr?null:e;default:return null}}(e,r):function(e,t){if(Br)return"compositionend"===e||!Ar&&zr(e,t)?(e=er(),Zt=Xt=Jt=null,Br=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ir&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=Vn(n,"onBeforeInput")).length&&(o=new br("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=g)}Dn(i,t)}))}function Hn(e,t,r){return{instance:e,listener:t,currentTarget:r}}function Vn(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Te(e,r))&&n.unshift(Hn(e,a,o)),null!=(a=Te(e,t))&&n.push(Hn(e,a,o))),e=e.return}return n}function qn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,u=l.alternate,c=l.stateNode;if(null!==u&&u===n)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Te(r,a))&&i.unshift(Hn(r,u,l)):o||null!=(u=Te(r,a))&&i.push(Hn(r,u,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}var Yn=/\r\n?/g,Kn=/\u0000|\uFFFD/g;function Jn(e){return("string"==typeof e?e:""+e).replace(Yn,"\n").replace(Kn,"")}function Xn(e,t,r){if(t=Jn(t),Jn(e)!==t&&r)throw Error(a(425))}function Zn(){}var eo=null,to=null;function ro(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var no="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:no;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var r=t,n=0;do{var o=r.nextSibling;if(e.removeChild(r),o&&8===o.nodeType)if("/$"===(r=o.data)){if(0===n)return e.removeChild(o),void Gt(t);n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++;r=o}while(r);Gt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,yo="__reactEvents$"+fo,vo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var r=e.parentNode;r;){if(t=r[mo]||r[po]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=so(e);null!==e;){if(r=e[po])return r;e=so(e)}return t}r=(e=r).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function xo(e){return e[ho]||null}var So=[],ko=-1;function Oo(e){return{current:e}}function No(e){0>ko||(e.current=So[ko],So[ko]=null,ko--)}function Lo(e,t){ko++,So[ko]=e.current,e.current=t}var Po={},jo=Oo(Po),_o=Oo(!1),Co=Po;function To(e,t){var r=e.type.contextTypes;if(!r)return Po;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ao(e){return null!=e.childContextTypes}function Ro(){No(_o),No(jo)}function Fo(e,t,r){if(jo.current!==Po)throw Error(a(168));Lo(jo,t),Lo(_o,r)}function Io(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var o in n=n.getChildContext())if(!(o in t))throw Error(a(108,$(e)||"Unknown",o));return U({},r,n)}function Uo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,Co=jo.current,Lo(jo,e),Lo(_o,_o.current),!0}function Do(e,t,r){var n=e.stateNode;if(!n)throw Error(a(169));r?(e=Io(e,t,Co),n.__reactInternalMemoizedMergedChildContext=e,No(_o),No(jo),Lo(jo,e)):No(_o),Lo(_o,r)}var zo=null,Mo=!1,Bo=!1;function Go(e){null===zo?zo=[e]:zo.push(e)}function $o(){if(!Bo&&null!==zo){Bo=!0;var e=0,t=bt;try{var r=zo;for(bt=1;e<r.length;e++){var n=r[e];do{n=n(!0)}while(null!==n)}zo=null,Mo=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),qe(Ze,$o),t}finally{bt=t,Bo=!1}}return null}var Wo=[],Ho=0,Vo=null,qo=0,Qo=[],Yo=0,Ko=null,Jo=1,Xo="";function Zo(e,t){Wo[Ho++]=qo,Wo[Ho++]=Vo,Vo=e,qo=t}function ea(e,t,r){Qo[Yo++]=Jo,Qo[Yo++]=Xo,Qo[Yo++]=Ko,Ko=e;var n=Jo;e=Xo;var o=32-it(n)-1;n&=~(1<<o),r+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(n&(1<<i)-1).toString(32),n>>=i,o-=i,Jo=1<<32-it(t)+o|r<<o|n,Xo=a+e}else Jo=1<<a|r<<o|n,Xo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function ra(e){for(;e===Vo;)Vo=Wo[--Ho],Wo[Ho]=null,qo=Wo[--Ho],Wo[Ho]=null;for(;e===Ko;)Ko=Qo[--Yo],Qo[Yo]=null,Xo=Qo[--Yo],Qo[Yo]=null,Jo=Qo[--Yo],Qo[Yo]=null}var na=null,oa=null,aa=!1,ia=null;function la(e,t){var r=Tc(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,null===(t=e.deletions)?(e.deletions=[r],e.flags|=16):t.push(r)}function ua(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(r=null!==Ko?{id:Jo,overflow:Xo}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},(r=Tc(18,null,null,0)).stateNode=t,r.return=e,e.child=r,na=e,oa=null,!0);default:return!1}}function ca(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var r=t;if(!ua(e,t)){if(ca(e))throw Error(a(418));t=co(r.nextSibling);var n=na;t&&ua(e,t)?la(n,r):(e.flags=-4097&e.flags|2,aa=!1,na=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,na=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function da(e){if(e!==na)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ro(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=co(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}oa=null}}else oa=na?co(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=co(e.nextSibling)}function ha(){oa=na=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ya=w.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var r in t=U({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var ga=Oo(null),ba=null,wa=null,Ea=null;function xa(){Ea=wa=ba=null}function Sa(e){var t=ga.current;No(ga),e._currentValue=t}function ka(e,t,r){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function Oa(e,t){ba=e,Ea=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Na(e){var t=e._currentValue;if(Ea!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var La=null;function Pa(e){null===La?La=[e]:La.push(e)}function ja(e,t,r,n){var o=t.interleaved;return null===o?(r.next=r,Pa(t)):(r.next=o.next,o.next=r),t.interleaved=r,_a(e,n)}function _a(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}var Ca=!1;function Ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ra(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,r){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,0!=(2&ju)){var o=n.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),n.pending=t,_a(e,r)}return null===(o=n.interleaved)?(t.next=t,Pa(n)):(t.next=o.next,o.next=t),n.interleaved=t,_a(e,r)}function Ia(e,t,r){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&r))){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,gt(e,r)}}function Ua(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function Da(e,t,r,n){var o=e.updateQueue;Ca=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===i?a=c:i.next=c,i=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,s=c=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((n&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=r,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=U({},f,d);break e;case 2:Ca=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Uu|=i,e.lanes=i,e.memoizedState=f}}function za(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!=typeof o)throw Error(a(191,o));o.call(n)}}}var Ma=(new n.Component).refs;function Ba(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:U({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var Ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=tc(),o=rc(e),a=Ra(n,o);a.payload=t,null!=r&&(a.callback=r),null!==(t=Fa(e,a,o))&&(nc(t,e,o,n),Ia(t,e,o))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=tc(),o=rc(e),a=Ra(n,o);a.tag=1,a.payload=t,null!=r&&(a.callback=r),null!==(t=Fa(e,a,o))&&(nc(t,e,o,n),Ia(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=tc(),n=rc(e),o=Ra(r,n);o.tag=2,null!=t&&(o.callback=t),null!==(t=Fa(e,o,n))&&(nc(t,e,n,r),Ia(t,e,n))}};function $a(e,t,r,n,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&un(r,n)&&un(o,a))}function Wa(e,t,r){var n=!1,o=Po,a=t.contextType;return"object"==typeof a&&null!==a?a=Na(a):(o=Ao(t)?Co:jo.current,a=(n=null!=(n=t.contextTypes))?To(e,o):Po),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&Ga.enqueueReplaceState(t,t.state,null)}function Va(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=Ma,Ta(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Na(a):(a=Ao(t)?Co:jo.current,o.context=To(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ba(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ga.enqueueReplaceState(o,o.state,null),Da(e,r,o,n),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function qa(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(a(309));var n=r.stateNode}if(!n)throw Error(a(147,e));var o=n,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ma&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!r._owner)throw Error(a(290,e))}return e}function Qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ya(e){return(0,e._init)(e._payload)}function Ka(e){function t(t,r){if(e){var n=t.deletions;null===n?(t.deletions=[r],t.flags|=16):n.push(r)}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Rc(e,t)).index=0,e.sibling=null,e}function i(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags|=2,r):n:(t.flags|=2,r):(t.flags|=1048576,r)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Dc(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){var a=r.type;return a===S?f(e,t,r.props.children,n,r.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===T&&Ya(a)===t.type)?((n=o(t,r.props)).ref=qa(e,t,r),n.return=e,n):((n=Fc(r.type,r.key,r.props,null,e.mode,n)).ref=qa(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=zc(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Ic(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Dc(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Fc(t.type,t.key,t.props,null,e.mode,r)).ref=qa(e,null,t),r.return=e,r;case x:return(t=zc(t,e.mode,r)).return=e,t;case T:return d(e,(0,t._init)(t._payload),r)}if(te(t)||F(t))return(t=Ic(t,e.mode,r,null)).return=e,t;Qa(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==o?null:u(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?c(e,t,r,n):null;case x:return r.key===o?s(e,t,r,n):null;case T:return p(e,t,(o=r._init)(r._payload),n)}if(te(r)||F(r))return null!==o?null:f(e,t,r,n,null);Qa(e,r)}return null}function h(e,t,r,n,o){if("string"==typeof n&&""!==n||"number"==typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return c(t,e=e.get(null===n.key?r:n.key)||null,n,o);case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o);case T:return h(e,t,r,(0,n._init)(n._payload),o)}if(te(n)||F(n))return f(t,e=e.get(r)||null,n,o,null);Qa(t,n)}return null}function m(o,a,l,u){for(var c=null,s=null,f=a,m=a=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v,f=y}if(m===l.length)return r(o,f),aa&&Zo(o,m),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return aa&&Zo(o,m),c}for(f=n(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),c}function y(o,l,u,c){var s=F(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,m=l,y=l=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,y),null===f?s=b:f.sibling=b,f=b,m=v}if(g.done)return r(o,m),aa&&Zo(o,y),s;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=d(o,g.value,c))&&(l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return aa&&Zo(o,y),s}for(m=n(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,y),s}return function e(n,a,i,u){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case E:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===S){if(7===s.tag){r(n,s.sibling),(a=o(s,i.props.children)).return=n,n=a;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===T&&Ya(c)===s.type){r(n,s.sibling),(a=o(s,i.props)).ref=qa(n,s,i),a.return=n,n=a;break e}r(n,s);break}t(n,s),s=s.sibling}i.type===S?((a=Ic(i.props.children,n.mode,u,i.key)).return=n,n=a):((u=Fc(i.type,i.key,i.props,null,n.mode,u)).ref=qa(n,a,i),u.return=n,n=u)}return l(n);case x:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){r(n,a.sibling),(a=o(a,i.children||[])).return=n,n=a;break e}r(n,a);break}t(n,a),a=a.sibling}(a=zc(i,n.mode,u)).return=n,n=a}return l(n);case T:return e(n,a,(s=i._init)(i._payload),u)}if(te(i))return m(n,a,i,u);if(F(i))return y(n,a,i,u);Qa(n,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(r(n,a.sibling),(a=o(a,i)).return=n,n=a):(r(n,a),(a=Dc(i,n.mode,u)).return=n,n=a),l(n)):r(n,a)}}var Ja=Ka(!0),Xa=Ka(!1),Za={},ei=Oo(Za),ti=Oo(Za),ri=Oo(Za);function ni(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch(Lo(ri,t),Lo(ti,e),Lo(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}No(ei),Lo(ei,t)}function ai(){No(ei),No(ti),No(ri)}function ii(e){ni(ri.current);var t=ni(ei.current),r=ue(t,e.type);t!==r&&(Lo(ti,e),Lo(ei,r))}function li(e){ti.current===e&&(No(ei),No(ti))}var ui=Oo(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,yi=null,vi=null,gi=!1,bi=!1,wi=0,Ei=0;function xi(){throw Error(a(321))}function Si(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function ki(e,t,r,n,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:ul,e=r(n,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,vi=yi=null,t.updateQueue=null,di.current=cl,e=r(n,o)}while(bi)}if(di.current=il,t=null!==yi&&null!==yi.next,hi=0,vi=yi=mi=null,gi=!1,t)throw Error(a(300));return e}function Oi(){var e=0!==wi;return wi=0,e}function Ni(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Li(){if(null===yi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=yi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,yi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(yi=e).memoizedState,baseState:yi.baseState,baseQueue:yi.baseQueue,queue:yi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Pi(e,t){return"function"==typeof t?t(e):t}function ji(e){var t=Li(),r=t.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=e;var n=yi,o=n.baseQueue,i=r.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}n.baseQueue=o=i,r.pending=null}if(null!==o){i=o.next,n=n.baseState;var u=l=null,c=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),n=s.hasEagerState?s.eagerState:e(n,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,l=n):c=c.next=d,mi.lanes|=f,Uu|=f}s=s.next}while(null!==s&&s!==i);null===c?l=n:c.next=u,ln(n,t.memoizedState)||(wl=!0),t.memoizedState=n,t.baseState=l,t.baseQueue=c,r.lastRenderedState=n}if(null!==(e=r.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Uu|=i,o=o.next}while(o!==e)}else null===o&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function _i(e){var t=Li(),r=t.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,i=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ln(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),r.lastRenderedState=i}return[i,n]}function Ci(){}function Ti(e,t){var r=mi,n=Li(),o=t(),i=!ln(n.memoizedState,o);if(i&&(n.memoizedState=o,wl=!0),n=n.queue,Wi(Fi.bind(null,r,n,e),[e]),n.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(r.flags|=2048,zi(9,Ri.bind(null,r,n,o,t),void 0,null),null===_u)throw Error(a(349));0!=(30&hi)||Ai(r,t,o)}return o}function Ai(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(r=t.stores)?t.stores=[e]:r.push(e)}function Ri(e,t,r,n){t.value=r,t.getSnapshot=n,Ii(t)&&Ui(e)}function Fi(e,t,r){return r((function(){Ii(t)&&Ui(e)}))}function Ii(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!ln(e,r)}catch(e){return!0}}function Ui(e){var t=_a(e,1);null!==t&&nc(t,e,1,-1)}function Di(e){var t=Ni();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pi,lastRenderedState:e},t.queue=e,e=e.dispatch=rl.bind(null,mi,e),[t.memoizedState,e]}function zi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function Mi(){return Li().memoizedState}function Bi(e,t,r,n){var o=Ni();mi.flags|=e,o.memoizedState=zi(1|t,r,void 0,void 0===n?null:n)}function Gi(e,t,r,n){var o=Li();n=void 0===n?null:n;var a=void 0;if(null!==yi){var i=yi.memoizedState;if(a=i.destroy,null!==n&&Si(n,i.deps))return void(o.memoizedState=zi(t,r,a,n))}mi.flags|=e,o.memoizedState=zi(1|t,r,a,n)}function $i(e,t){return Bi(8390656,8,e,t)}function Wi(e,t){return Gi(2048,8,e,t)}function Hi(e,t){return Gi(4,2,e,t)}function Vi(e,t){return Gi(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qi(e,t,r){return r=null!=r?r.concat([e]):null,Gi(4,4,qi.bind(null,t,e),r)}function Yi(){}function Ki(e,t){var r=Li();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Si(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ji(e,t){var r=Li();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Si(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Xi(e,t,r){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=r):(ln(r,t)||(r=mt(),mi.lanes|=r,Uu|=r,e.baseState=!0),t)}function Zi(e,t){var r=bt;bt=0!==r&&4>r?r:4,e(!0);var n=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=r,pi.transition=n}}function el(){return Li().memoizedState}function tl(e,t,r){var n=rc(e);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},nl(e)?ol(t,r):null!==(r=ja(e,t,r,n))&&(nc(r,e,n,tc()),al(r,t,n))}function rl(e,t,r){var n=rc(e),o={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(nl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,r);if(o.hasEagerState=!0,o.eagerState=l,ln(l,i)){var u=t.interleaved;return null===u?(o.next=o,Pa(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(r=ja(e,t,o,n))&&(nc(r,e,n,o=tc()),al(r,t,n))}}function nl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var r=e.pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function al(e,t,r){if(0!=(4194240&r)){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,gt(e,r)}}var il={readContext:Na,useCallback:xi,useContext:xi,useEffect:xi,useImperativeHandle:xi,useInsertionEffect:xi,useLayoutEffect:xi,useMemo:xi,useReducer:xi,useRef:xi,useState:xi,useDebugValue:xi,useDeferredValue:xi,useTransition:xi,useMutableSource:xi,useSyncExternalStore:xi,useId:xi,unstable_isNewReconciler:!1},ll={readContext:Na,useCallback:function(e,t){return Ni().memoizedState=[e,void 0===t?null:t],e},useContext:Na,useEffect:$i,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,Bi(4194308,4,qi.bind(null,t,e),r)},useLayoutEffect:function(e,t){return Bi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bi(4,2,e,t)},useMemo:function(e,t){var r=Ni();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Ni();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=tl.bind(null,mi,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Ni().memoizedState=e},useState:Di,useDebugValue:Yi,useDeferredValue:function(e){return Ni().memoizedState=e},useTransition:function(){var e=Di(!1),t=e[0];return e=Zi.bind(null,e[1]),Ni().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=mi,o=Ni();if(aa){if(void 0===r)throw Error(a(407));r=r()}else{if(r=t(),null===_u)throw Error(a(349));0!=(30&hi)||Ai(n,t,r)}o.memoizedState=r;var i={value:r,getSnapshot:t};return o.queue=i,$i(Fi.bind(null,n,i,e),[e]),n.flags|=2048,zi(9,Ri.bind(null,n,i,r,t),void 0,null),r},useId:function(){var e=Ni(),t=_u.identifierPrefix;if(aa){var r=Xo;t=":"+t+"R"+(r=(Jo&~(1<<32-it(Jo)-1)).toString(32)+r),0<(r=wi++)&&(t+="H"+r.toString(32)),t+=":"}else t=":"+t+"r"+(r=Ei++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Na,useCallback:Ki,useContext:Na,useEffect:Wi,useImperativeHandle:Qi,useInsertionEffect:Hi,useLayoutEffect:Vi,useMemo:Ji,useReducer:ji,useRef:Mi,useState:function(){return ji(Pi)},useDebugValue:Yi,useDeferredValue:function(e){return Xi(Li(),yi.memoizedState,e)},useTransition:function(){return[ji(Pi)[0],Li().memoizedState]},useMutableSource:Ci,useSyncExternalStore:Ti,useId:el,unstable_isNewReconciler:!1},cl={readContext:Na,useCallback:Ki,useContext:Na,useEffect:Wi,useImperativeHandle:Qi,useInsertionEffect:Hi,useLayoutEffect:Vi,useMemo:Ji,useReducer:_i,useRef:Mi,useState:function(){return _i(Pi)},useDebugValue:Yi,useDeferredValue:function(e){var t=Li();return null===yi?t.memoizedState=e:Xi(t,yi.memoizedState,e)},useTransition:function(){return[_i(Pi)[0],Li().memoizedState]},useMutableSource:Ci,useSyncExternalStore:Ti,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var r="",n=t;do{r+=B(n),n=n.return}while(n);var o=r}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,r){return{value:e,source:null,stack:null!=r?r:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,r){(r=Ra(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Hu||(Hu=!0,Vu=n),dl(0,t)},r}function ml(e,t,r){(r=Ra(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var o=t.value;r.payload=function(){return n(o)},r.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){dl(0,t),"function"!=typeof n&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}function yl(e,t,r){var n=e.pingCache;if(null===n){n=e.pingCache=new pl;var o=new Set;n.set(t,o)}else void 0===(o=n.get(t))&&(o=new Set,n.set(t,o));o.has(r)||(o.add(r),e=Nc.bind(null,e,t,r),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,r,n,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((t=Ra(-1,1)).tag=2,Fa(r,t,1))),r.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function El(e,t,r,n){t.child=null===e?Xa(t,null,r,n):Ja(t,e.child,r,n)}function xl(e,t,r,n,o){r=r.render;var a=t.ref;return Oa(t,o),n=ki(e,t,r,n,a,o),r=Oi(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,El(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Sl(e,t,r,n,o){if(null===e){var a=r.type;return"function"!=typeof a||Ac(a)||void 0!==a.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Fc(r.type,null,n,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,kl(e,t,a,n,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((r=null!==(r=r.compare)?r:un)(i,n)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Rc(a,n)).ref=t.ref,e.return=t,t.child=e}function kl(e,t,r,n,o){if(null!==e){var a=e.memoizedProps;if(un(a,n)&&e.ref===t.ref){if(wl=!1,t.pendingProps=n=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Ll(e,t,r,n,o)}function Ol(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Lo(Ru,Au),Au|=r;else{if(0==(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Lo(Ru,Au),Au|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==a?a.baseLanes:r,Lo(Ru,Au),Au|=n}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,Lo(Ru,Au),Au|=n;return El(e,t,o,r),t.child}function Nl(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function Ll(e,t,r,n,o){var a=Ao(r)?Co:jo.current;return a=To(t,a),Oa(t,o),r=ki(e,t,r,n,a,o),n=Oi(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,El(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Pl(e,t,r,n,o){if(Ao(r)){var a=!0;Uo(t)}else a=!1;if(Oa(t,o),null===t.stateNode)Wl(e,t),Wa(t,r,n),Va(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=r.contextType;c="object"==typeof c&&null!==c?Na(c):To(t,c=Ao(r)?Co:jo.current);var s=r.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==n||u!==c)&&Ha(t,i,n,c),Ca=!1;var d=t.memoizedState;i.state=d,Da(t,n,i,o),u=t.memoizedState,l!==n||d!==u||_o.current||Ca?("function"==typeof s&&(Ba(t,r,s,n),u=t.memoizedState),(l=Ca||$a(t,r,l,n,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=c,n=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),n=!1)}else{i=t.stateNode,Aa(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:va(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=r.contextType)&&null!==u?Na(u):To(t,u=Ao(r)?Co:jo.current);var p=r.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&Ha(t,i,n,u),Ca=!1,d=t.memoizedState,i.state=d,Da(t,n,i,o);var h=t.memoizedState;l!==f||d!==h||_o.current||Ca?("function"==typeof p&&(Ba(t,r,p,n),h=t.memoizedState),(c=Ca||$a(t,r,c,n,d,h,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=u,n=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),n=!1)}return jl(e,t,r,n,a,o)}function jl(e,t,r,n,o,a){Nl(e,t);var i=0!=(128&t.flags);if(!n&&!i)return o&&Do(t,r,!1),Hl(e,t,a);n=t.stateNode,bl.current=t;var l=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Ja(t,e.child,null,a),t.child=Ja(t,null,l,a)):El(e,t,l,a),t.memoizedState=n.state,o&&Do(t,r,!0),t.child}function _l(e){var t=e.stateNode;t.pendingContext?Fo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Fo(0,t.context,!1),oi(e,t.containerInfo)}function Cl(e,t,r,n,o){return ha(),ma(o),t.flags|=256,El(e,t,r,n),t.child}var Tl,Al,Rl,Fl,Il={dehydrated:null,treeContext:null,retryLane:0};function Ul(e){return{baseLanes:e,cachePool:null,transitions:null}}function Dl(e,t,r){var n,o=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((n=u)||(n=(null===e||null!==e.memoizedState)&&0!=(2&i)),n?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Lo(ui,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Uc(u,o,0,null),e=Ic(e,o,r,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ul(r),t.memoizedState=Il,e):zl(t,u));if(null!==(i=e.memoizedState)&&null!==(n=i.dehydrated))return function(e,t,r,n,o,i,l){if(r)return 256&t.flags?(t.flags&=-257,Ml(e,t,l,n=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=n.fallback,o=t.mode,n=Uc({mode:"visible",children:n.children},o,0,null),(i=Ic(i,o,l,null)).flags|=2,n.return=t,i.return=t,n.sibling=i,t.child=n,0!=(1&t.mode)&&Ja(t,e.child,null,l),t.child.memoizedState=Ul(l),t.memoizedState=Il,i);if(0==(1&t.mode))return Ml(e,t,l,null);if("$!"===o.data){if(n=o.nextSibling&&o.nextSibling.dataset)var u=n.dgst;return n=u,Ml(e,t,l,n=fl(i=Error(a(419)),n,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(n=_u)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(n.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,_a(e,o),nc(n,e,o,-1))}return yc(),Ml(e,t,l,n=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Pc.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),na=t,aa=!0,ia=null,null!==e&&(Qo[Yo++]=Jo,Qo[Yo++]=Xo,Qo[Yo++]=Ko,Jo=e.id,Xo=e.overflow,Ko=t),(t=zl(t,n.children)).flags|=4096,t)}(e,t,u,o,n,i,r);if(l){l=o.fallback,u=t.mode,n=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Rc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==n?l=Rc(n,l):(l=Ic(l,u,r,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Ul(r):{baseLanes:u.baseLanes|r,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~r,t.memoizedState=Il,o}return e=(l=e.child).sibling,o=Rc(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=r),o.return=t,o.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Uc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ml(e,t,r,n){return null!==n&&ma(n),Ja(t,e.child,null,r),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,r){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ka(e.return,t,r)}function Gl(e,t,r,n,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=n,a.tail=r,a.tailMode=o)}function $l(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(El(e,t,n.children,r),0!=(2&(n=ui.current)))n=1&n|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,r,t);else if(19===e.tag)Bl(e,r,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(Lo(ui,n),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===ci(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Gl(t,!1,o,r,a);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Gl(t,!0,r,null,a);break;case"together":Gl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Uu|=t.lanes,0==(r&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(r=Rc(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Rc(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function Vl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,r=0,n=0;if(t)for(var o=e.child;null!==o;)r|=o.lanes|o.childLanes,n|=14680064&o.subtreeFlags,n|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)r|=o.lanes|o.childLanes,n|=o.subtreeFlags,n|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}function Ql(e,t,r){var n=t.pendingProps;switch(ra(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Ao(t.type)&&Ro(),ql(t),null;case 3:return n=t.stateNode,ai(),No(_o),No(jo),fi(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lc(ia),ia=null))),Al(e,t),ql(t),null;case 5:li(t);var o=ni(ri.current);if(r=t.type,null!==e&&null!=t.stateNode)Rl(e,t,r,n,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(a(166));return ql(t),null}if(e=ni(ei.current),da(t)){n=t.stateNode,r=t.type;var i=t.memoizedProps;switch(n[po]=t,n[ho]=i,e=0!=(1&t.mode),r){case"dialog":zn("cancel",n),zn("close",n);break;case"iframe":case"object":case"embed":zn("load",n);break;case"video":case"audio":for(o=0;o<Fn.length;o++)zn(Fn[o],n);break;case"source":zn("error",n);break;case"img":case"image":case"link":zn("error",n),zn("load",n);break;case"details":zn("toggle",n);break;case"input":K(n,i),zn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!i.multiple},zn("invalid",n);break;case"textarea":oe(n,i),zn("invalid",n)}for(var u in ge(r,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?n.textContent!==c&&(!0!==i.suppressHydrationWarning&&Xn(n.textContent,c,e),o=["children",c]):"number"==typeof c&&n.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Xn(n.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&zn("scroll",n)}switch(r){case"input":V(n),Z(n,i,!0);break;case"textarea":V(n),ie(n);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(n.onclick=Zn)}n=o,t.updateQueue=n,null!==n&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(r)),"http://www.w3.org/1999/xhtml"===e?"script"===r?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=u.createElement(r,{is:n.is}):(e=u.createElement(r),"select"===r&&(u=e,n.multiple?u.multiple=!0:n.size&&(u.size=n.size))):e=u.createElementNS(e,r),e[po]=t,e[ho]=n,Tl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(r,n),r){case"dialog":zn("cancel",e),zn("close",e),o=n;break;case"iframe":case"object":case"embed":zn("load",e),o=n;break;case"video":case"audio":for(o=0;o<Fn.length;o++)zn(Fn[o],e);o=n;break;case"source":zn("error",e),o=n;break;case"img":case"image":case"link":zn("error",e),zn("load",e),o=n;break;case"details":zn("toggle",e),o=n;break;case"input":K(e,n),o=Y(e,n),zn("invalid",e);break;case"option":default:o=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},o=U({},n,{value:void 0}),zn("invalid",e);break;case"textarea":oe(e,n),o=ne(e,n),zn("invalid",e)}for(i in ge(r,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ye(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==r||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&zn("scroll",e):null!=s&&b(e,i,s,u))}switch(r){case"input":V(e),Z(e,n,!1);break;case"textarea":V(e),ie(e);break;case"option":null!=n.value&&e.setAttribute("value",""+W(n.value));break;case"select":e.multiple=!!n.multiple,null!=(i=n.value)?re(e,!!n.multiple,i,!1):null!=n.defaultValue&&re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zn)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Fl(e,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(a(166));if(r=ni(ri.current),ni(ei.current),da(t)){if(n=t.stateNode,r=t.memoizedProps,n[po]=t,(i=n.nodeValue!==r)&&null!==(e=na))switch(e.tag){case 3:Xn(n.nodeValue,r,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xn(n.nodeValue,r,0!=(1&e.mode))}i&&(t.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[po]=t,t.stateNode=n}return ql(t),null;case 13:if(No(ui),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==n&&null!==n.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==ia&&(lc(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=r,t):((n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Fu&&(Fu=3):yc())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return ai(),Al(e,t),null===e&&Gn(t.stateNode.containerInfo),ql(t),null;case 10:return Sa(t.type._context),ql(t),null;case 19:if(No(ui),null===(i=t.memoizedState))return ql(t),null;if(n=0!=(128&t.flags),null===(u=i.rendering))if(n)Vl(i,!1);else{if(0!==Fu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ci(e))){for(t.flags|=128,Vl(i,!1),null!==(n=u.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;null!==r;)e=n,(i=r).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return Lo(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Je()>$u&&(t.flags|=128,n=!0,Vl(i,!1),t.lanes=4194304)}else{if(!n)if(null!==(e=ci(u))){if(t.flags|=128,n=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),Vl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return ql(t),null}else 2*Je()-i.renderingStartTime>$u&&1073741824!==r&&(t.flags|=128,n=!0,Vl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(r=i.last)?r.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Je(),t.sibling=null,r=ui.current,Lo(ui,n?1&r|2:1&r),t):(ql(t),null);case 22:case 23:return dc(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&0!=(1&t.mode)?0!=(1073741824&Au)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Yl(e,t){switch(ra(t),t.tag){case 1:return Ao(t.type)&&Ro(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),No(_o),No(jo),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(No(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return No(ui),null;case 4:return ai(),null;case 10:return Sa(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Tl=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Al=function(){},Rl=function(e,t,r,n){var o=e.memoizedProps;if(o!==n){e=t.stateNode,ni(ei.current);var a,i=null;switch(r){case"input":o=Y(e,o),n=Y(e,n),i=[];break;case"select":o=U({},o,{value:void 0}),n=U({},n,{value:void 0}),i=[];break;case"textarea":o=ne(e,o),n=ne(e,n),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof n.onClick&&(e.onclick=Zn)}for(s in ge(r,n),r=null,o)if(!n.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(r||(r={}),r[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in n){var c=n[s];if(u=null!=o?o[s]:void 0,n.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(r||(r={}),r[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(r||(r={}),r[a]=c[a])}else r||(i||(i=[]),i.push(s,r)),r=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&zn("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}r&&(i=i||[]).push("style",r);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Fl=function(e,t,r,n){r!==n&&(t.flags|=4)};var Kl=!1,Jl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var r=e.ref;if(null!==r)if("function"==typeof r)try{r(null)}catch(r){Oc(e,t,r)}else r.current=null}function tu(e,t,r){try{r()}catch(r){Oc(e,t,r)}}var ru=!1;function nu(e,t,r){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var o=n=n.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tu(t,r,a)}o=o.next}while(o!==n)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function au(e){var t=e.ref;if(null!==t){var r=e.stateNode;e.tag,e=r,"function"==typeof t?t(e):t.current=e}}function iu(e){var t=e.alternate;null!==t&&(e.alternate=null,iu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[yo],delete t[vo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Zn));else if(4!==n&&null!==(e=e.child))for(cu(e,t,r),e=e.sibling;null!==e;)cu(e,t,r),e=e.sibling}function su(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(su(e,t,r),e=e.sibling;null!==e;)su(e,t,r),e=e.sibling}var fu=null,du=!1;function pu(e,t,r){for(r=r.child;null!==r;)hu(e,t,r),r=r.sibling}function hu(e,t,r){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,r)}catch(e){}switch(r.tag){case 5:Jl||eu(r,t);case 6:var n=fu,o=du;fu=null,pu(e,t,r),du=o,null!==(fu=n)&&(du?(e=fu,r=r.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)):fu.removeChild(r.stateNode));break;case 18:null!==fu&&(du?(e=fu,r=r.stateNode,8===e.nodeType?uo(e.parentNode,r):1===e.nodeType&&uo(e,r),Gt(e)):uo(fu,r.stateNode));break;case 4:n=fu,o=du,fu=r.stateNode.containerInfo,du=!0,pu(e,t,r),fu=n,du=o;break;case 0:case 11:case 14:case 15:if(!Jl&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){o=n=n.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tu(r,t,i),o=o.next}while(o!==n)}pu(e,t,r);break;case 1:if(!Jl&&(eu(r,t),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(e){Oc(r,t,e)}pu(e,t,r);break;case 21:pu(e,t,r);break;case 22:1&r.mode?(Jl=(n=Jl)||null!==r.memoizedState,pu(e,t,r),Jl=n):pu(e,t,r);break;default:pu(e,t,r)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Xl),t.forEach((function(t){var n=jc.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function yu(e,t){var r=t.deletions;if(null!==r)for(var n=0;n<r.length;n++){var o=r[n];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(a(160));hu(i,l,o),fu=null,du=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){Oc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vu(t,e),t=t.sibling}function vu(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yu(t,e),gu(e),4&n){try{nu(3,e,e.return),ou(3,e)}catch(t){Oc(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Oc(e,e.return,t)}}break;case 1:yu(t,e),gu(e),512&n&&null!==r&&eu(r,r.return);break;case 5:if(yu(t,e),gu(e),512&n&&null!==r&&eu(r,r.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Oc(e,e.return,t)}}if(4&n&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==r?r.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&J(o,i),be(u,l);var s=be(u,i);for(l=0;l<c.length;l+=2){var f=c[l],d=c[l+1];"style"===f?ye(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(u){case"input":X(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?re(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?re(o,!!i.multiple,i.defaultValue,!0):re(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Oc(e,e.return,t)}}break;case 6:if(yu(t,e),gu(e),4&n){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Oc(e,e.return,t)}}break;case 3:if(yu(t,e),gu(e),4&n&&null!==r&&r.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){Oc(e,e.return,t)}break;case 4:default:yu(t,e),gu(e);break;case 13:yu(t,e),gu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Gu=Je())),4&n&&mu(e);break;case 22:if(f=null!==r&&null!==r.memoizedState,1&e.mode?(Jl=(s=Jl)||f,yu(t,e),Jl=s):yu(t,e),gu(e),8192&n){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){n=p,r=p.return;try{t=n,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Oc(n,r,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){xu(d);continue}}null!==h?(h.return=p,Zl=h):xu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=me("display",l))}catch(t){Oc(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){Oc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:yu(t,e),gu(e),4&n&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var r=e.return;null!==r;){if(lu(r)){var n=r;break e}r=r.return}throw Error(a(160))}switch(n.tag){case 5:var o=n.stateNode;32&n.flags&&(de(o,""),n.flags&=-33),su(e,uu(e),o);break;case 3:case 4:var i=n.stateNode.containerInfo;cu(e,uu(e),i);break;default:throw Error(a(161))}}catch(t){Oc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,r){Zl=e,wu(e,t,r)}function wu(e,t,r){for(var n=0!=(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&n){var i=null!==o.memoizedState||Kl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Jl;l=Kl;var c=Jl;if(Kl=i,(Jl=u)&&!c)for(Zl=o;null!==Zl;)u=(i=Zl).child,22===i.tag&&null!==i.memoizedState?Su(o):null!==u?(u.return=i,Zl=u):Su(o);for(;null!==a;)Zl=a,wu(a,t,r),a=a.sibling;Zl=o,Kl=l,Jl=c}Eu(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zl=a):Eu(e)}}function Eu(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var r=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Jl||ou(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!Jl)if(null===r)n.componentDidMount();else{var o=t.elementType===t.type?r.memoizedProps:va(t.type,r.memoizedProps);n.componentDidUpdate(o,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&za(t,i,n);break;case 3:var l=t.updateQueue;if(null!==l){if(r=null,null!==t.child)switch(t.child.tag){case 5:case 1:r=t.child.stateNode}za(t,l,r)}break;case 5:var u=t.stateNode;if(null===r&&4&t.flags){r=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&r.focus();break;case"img":c.src&&(r.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Gt(d)}}}break;default:throw Error(a(163))}Jl||512&t.flags&&au(t)}catch(e){Oc(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(r=t.sibling)){r.return=t.return,Zl=r;break}Zl=t.return}}function xu(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var r=t.sibling;if(null!==r){r.return=t.return,Zl=r;break}Zl=t.return}}function Su(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{ou(4,t)}catch(e){Oc(t,r,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var o=t.return;try{n.componentDidMount()}catch(e){Oc(t,o,e)}}var a=t.return;try{au(t)}catch(e){Oc(t,a,e)}break;case 5:var i=t.return;try{au(t)}catch(e){Oc(t,i,e)}}}catch(e){Oc(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var ku,Ou=Math.ceil,Nu=w.ReactCurrentDispatcher,Lu=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,ju=0,_u=null,Cu=null,Tu=0,Au=0,Ru=Oo(0),Fu=0,Iu=null,Uu=0,Du=0,zu=0,Mu=null,Bu=null,Gu=0,$u=1/0,Wu=null,Hu=!1,Vu=null,qu=null,Qu=!1,Yu=null,Ku=0,Ju=0,Xu=null,Zu=-1,ec=0;function tc(){return 0!=(6&ju)?Je():-1!==Zu?Zu:Zu=Je()}function rc(e){return 0==(1&e.mode)?1:0!=(2&ju)&&0!==Tu?Tu&-Tu:null!==ya.transition?(0===ec&&(ec=mt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function nc(e,t,r,n){if(50<Ju)throw Ju=0,Xu=null,Error(a(185));vt(e,r,n),0!=(2&ju)&&e===_u||(e===_u&&(0==(2&ju)&&(Du|=r),4===Fu&&uc(e,Tu)),oc(e,n),1===r&&0===ju&&0==(1&t.mode)&&($u=Je()+500,Mo&&$o()))}function oc(e,t){var r=e.callbackNode;!function(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!=(l&r)&&0==(l&n)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var n=dt(e,e===_u?Tu:0);if(0===n)null!==r&&Qe(r),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(null!=r&&Qe(r),1===t)0===e.tag?function(e){Mo=!0,Go(e)}(cc.bind(null,e)):Go(cc.bind(null,e)),io((function(){0==(6&ju)&&$o()})),r=null;else{switch(wt(n)){case 1:r=Ze;break;case 4:r=et;break;case 16:default:r=tt;break;case 536870912:r=nt}r=_c(r,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function ac(e,t){if(Zu=-1,ec=0,0!=(6&ju))throw Error(a(327));var r=e.callbackNode;if(Sc()&&e.callbackNode!==r)return null;var n=dt(e,e===_u?Tu:0);if(0===n)return null;if(0!=(30&n)||0!=(n&e.expiredLanes)||t)t=vc(e,n);else{t=n;var o=ju;ju|=2;var i=mc();for(_u===e&&Tu===t||(Wu=null,$u=Je()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}xa(),Nu.current=i,ju=o,null!==Cu?t=0:(_u=null,Tu=0,t=Fu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(n=o,t=ic(e,o)),1===t)throw r=Iu,pc(e,0),uc(e,n),oc(e,Je()),r;if(6===t)uc(e,n);else{if(o=e.current.alternate,0==(30&n)&&!function(e){for(var t=e;;){if(16384&t.flags){var r=t.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var o=r[n],a=o.getSnapshot;o=o.value;try{if(!ln(a(),o))return!1}catch(e){return!1}}}if(r=t.child,16384&t.subtreeFlags&&null!==r)r.return=t,t=r;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vc(e,n))&&0!==(i=ht(e))&&(n=i,t=ic(e,i)),1===t))throw r=Iu,pc(e,0),uc(e,n),oc(e,Je()),r;switch(e.finishedWork=o,e.finishedLanes=n,t){case 0:case 1:throw Error(a(345));case 2:case 5:xc(e,Bu,Wu);break;case 3:if(uc(e,n),(130023424&n)===n&&10<(t=Gu+500-Je())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=no(xc.bind(null,e,Bu,Wu),t);break}xc(e,Bu,Wu);break;case 4:if(uc(e,n),(4194240&n)===n)break;for(t=e.eventTimes,o=-1;0<n;){var l=31-it(n);i=1<<l,(l=t[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Je()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ou(n/1960))-n)){e.timeoutHandle=no(xc.bind(null,e,Bu,Wu),n);break}xc(e,Bu,Wu);break;default:throw Error(a(329))}}}return oc(e,Je()),e.callbackNode===r?ac.bind(null,e):null}function ic(e,t){var r=Mu;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=vc(e,t))&&(t=Bu,Bu=r,null!==t&&lc(t)),e}function lc(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function uc(e,t){for(t&=~zu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-it(t),n=1<<r;e[r]=-1,t&=~n}}function cc(e){if(0!=(6&ju))throw Error(a(327));Sc();var t=dt(e,0);if(0==(1&t))return oc(e,Je()),null;var r=vc(e,t);if(0!==e.tag&&2===r){var n=ht(e);0!==n&&(t=n,r=ic(e,n))}if(1===r)throw r=Iu,pc(e,0),uc(e,t),oc(e,Je()),r;if(6===r)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xc(e,Bu,Wu),oc(e,Je()),null}function sc(e,t){var r=ju;ju|=1;try{return e(t)}finally{0===(ju=r)&&($u=Je()+500,Mo&&$o())}}function fc(e){null!==Yu&&0===Yu.tag&&0==(6&ju)&&Sc();var t=ju;ju|=1;var r=Pu.transition,n=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=n,Pu.transition=r,0==(6&(ju=t))&&$o()}}function dc(){Au=Ru.current,No(Ru)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,oo(r)),null!==Cu)for(r=Cu.return;null!==r;){var n=r;switch(ra(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Ro();break;case 3:ai(),No(_o),No(jo),fi();break;case 5:li(n);break;case 4:ai();break;case 13:case 19:No(ui);break;case 10:Sa(n.type._context);break;case 22:case 23:dc()}r=r.return}if(_u=e,Cu=e=Rc(e.current,null),Tu=Au=t,Fu=0,Iu=null,zu=Du=Uu=0,Bu=Mu=null,null!==La){for(t=0;t<La.length;t++)if(null!==(n=(r=La[t]).interleaved)){r.interleaved=null;var o=n.next,a=r.pending;if(null!==a){var i=a.next;a.next=o,n.next=i}r.pending=n}La=null}return e}function hc(e,t){for(;;){var r=Cu;try{if(xa(),di.current=il,gi){for(var n=mi.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}gi=!1}if(hi=0,vi=yi=mi=null,bi=!1,wi=0,Lu.current=null,null===r||null===r.return){Fu=1,Iu=t,Cu=null;break}e:{var i=e,l=r.return,u=r,c=t;if(t=Tu,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,gl(h,l,u,0,t),1&h.mode&&yl(i,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var y=new Set;y.add(c),t.updateQueue=y}else m.add(c);break e}if(0==(1&t)){yl(i,s,t),yc();break e}c=Error(a(426))}else if(aa&&1&u.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),gl(v,l,u,0,t),ma(sl(c,u));break e}}i=c=sl(c,u),4!==Fu&&(Fu=2),null===Mu?Mu=[i]:Mu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ua(i,hl(0,c,t));break e;case 1:u=c;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ua(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}Ec(r)}catch(e){t=e,Cu===r&&null!==r&&(Cu=r=r.return);continue}break}}function mc(){var e=Nu.current;return Nu.current=il,null===e?il:e}function yc(){0!==Fu&&3!==Fu&&2!==Fu||(Fu=4),null===_u||0==(268435455&Uu)&&0==(268435455&Du)||uc(_u,Tu)}function vc(e,t){var r=ju;ju|=2;var n=mc();for(_u===e&&Tu===t||(Wu=null,pc(e,t));;)try{gc();break}catch(t){hc(e,t)}if(xa(),ju=r,Nu.current=n,null!==Cu)throw Error(a(261));return _u=null,Tu=0,Fu}function gc(){for(;null!==Cu;)wc(Cu)}function bc(){for(;null!==Cu&&!Ye();)wc(Cu)}function wc(e){var t=ku(e.alternate,e,Au);e.memoizedProps=e.pendingProps,null===t?Ec(e):Cu=t,Lu.current=null}function Ec(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(r=Ql(r,t,Au)))return void(Cu=r)}else{if(null!==(r=Yl(r,t)))return r.flags&=32767,void(Cu=r);if(null===e)return Fu=6,void(Cu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Cu=t);Cu=t=e}while(null!==t);0===Fu&&(Fu=5)}function xc(e,t,r){var n=bt,o=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,r,n){do{Sc()}while(null!==Yu);if(0!=(6&ju))throw Error(a(327));r=e.finishedWork;var o=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var o=31-it(r),a=1<<o;t[o]=0,n[o]=-1,e[o]=-1,r&=~a}}(e,i),e===_u&&(Cu=_u=null,Tu=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Qu||(Qu=!0,_c(tt,(function(){return Sc(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=ju;ju|=4,Lu.current=null,function(e,t){if(eo=Wt,pn(e=dn())){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(r=(r=e.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var o=n.anchorOffset,i=n.focusNode;n=n.focusOffset;try{r.nodeType,i.nodeType}catch(e){r=null;break e}var l=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==r||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==n&&3!==d.nodeType||(c=l+n),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===r&&++s===o&&(u=l),p===i&&++f===n&&(c=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}r=-1===u||-1===c?null:{start:u,end:c}}else r=null}r=r||{start:0,end:0}}else r=null;for(to={focusedElem:e,selectionRange:r},Wt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:va(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Oc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=ru,ru=!1}(e,r),vu(r,e),hn(to),Wt=!!eo,to=eo=null,e.current=r,bu(r,e,o),Ke(),ju=u,bt=l,Pu.transition=i}else e.current=r;if(Qu&&(Qu=!1,Yu=e,Ku=o),0===(i=e.pendingLanes)&&(qu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),oc(e,Je()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n((o=t[r]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=Vu,Vu=null,e;0!=(1&Ku)&&0!==e.tag&&Sc(),0!=(1&(i=e.pendingLanes))?e===Xu?Ju++:(Ju=0,Xu=e):Ju=0,$o()}(e,t,r,n)}finally{Pu.transition=o,bt=n}return null}function Sc(){if(null!==Yu){var e=wt(Ku),t=Pu.transition,r=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Yu)var n=!1;else{if(e=Yu,Yu=null,Ku=0,0!=(6&ju))throw Error(a(331));var o=ju;for(ju|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(0!=(16&Zl.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Zl=s;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:nu(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(iu(f),f===s){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Zl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(i=Zl).flags))switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Zl=g;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Oc(u,u.return,e)}if(u===l){Zl=null;break e}var E=u.sibling;if(null!==E){E.return=u.return,Zl=E;break e}Zl=u.return}}if(ju=o,$o(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}n=!0}return n}finally{bt=r,Pu.transition=t}}return!1}function kc(e,t,r){e=Fa(e,t=hl(0,t=sl(r,t),1),1),t=tc(),null!==e&&(vt(e,1,t),oc(e,t))}function Oc(e,t,r){if(3===e.tag)kc(e,e,r);else for(;null!==t;){if(3===t.tag){kc(t,e,r);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===qu||!qu.has(n))){t=Fa(t,e=ml(t,e=sl(r,e),1),1),e=tc(),null!==t&&(vt(t,1,e),oc(t,e));break}}t=t.return}}function Nc(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&r,_u===e&&(Tu&r)===r&&(4===Fu||3===Fu&&(130023424&Tu)===Tu&&500>Je()-Gu?pc(e,0):zu|=r),oc(e,t)}function Lc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var r=tc();null!==(e=_a(e,t))&&(vt(e,t,r),oc(e,r))}function Pc(e){var t=e.memoizedState,r=0;null!==t&&(r=t.retryLane),Lc(e,r)}function jc(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,o=e.memoizedState;null!==o&&(r=o.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(a(314))}null!==n&&n.delete(t),Lc(e,r)}function _c(e,t){return qe(e,t)}function Cc(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tc(e,t,r,n){return new Cc(e,t,r,n)}function Ac(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rc(e,t){var r=e.alternate;return null===r?((r=Tc(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&e.flags,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Fc(e,t,r,n,o,i){var l=2;if(n=e,"function"==typeof e)Ac(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Ic(r.children,o,i,t);case k:l=8,o|=8;break;case O:return(e=Tc(12,r,t,2|o)).elementType=O,e.lanes=i,e;case j:return(e=Tc(13,r,t,o)).elementType=j,e.lanes=i,e;case _:return(e=Tc(19,r,t,o)).elementType=_,e.lanes=i,e;case A:return Uc(r,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case N:l=10;break e;case L:l=9;break e;case P:l=11;break e;case C:l=14;break e;case T:l=16,n=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Tc(l,r,t,o)).elementType=e,t.type=n,t.lanes=i,t}function Ic(e,t,r,n){return(e=Tc(7,e,n,t)).lanes=r,e}function Uc(e,t,r,n){return(e=Tc(22,e,n,t)).elementType=A,e.lanes=r,e.stateNode={isHidden:!1},e}function Dc(e,t,r){return(e=Tc(6,e,null,t)).lanes=r,e}function zc(e,t,r){return(t=Tc(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Mc(e,t,r,n,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=n,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bc(e,t,r,n,o,a,i,l,u){return e=new Mc(e,t,r,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Tc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ta(a),e}function Gc(e){if(!e)return Po;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ao(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var r=e.type;if(Ao(r))return Io(e,r,t)}return t}function $c(e,t,r,n,o,a,i,l,u){return(e=Bc(r,n,!0,e,0,a,0,l,u)).context=Gc(null),r=e.current,(a=Ra(n=tc(),o=rc(r))).callback=null!=t?t:null,Fa(r,a,o),e.current.lanes=o,vt(e,o,n),oc(e,n),e}function Wc(e,t,r,n){var o=t.current,a=tc(),i=rc(o);return r=Gc(r),null===t.context?t.context=r:t.pendingContext=r,(t=Ra(a,i)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=Fa(o,t,i))&&(nc(e,o,i,a),Ia(e,o,i)),i}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function qc(e,t){Vc(e,t),(e=e.alternate)&&Vc(e,t)}ku=function(e,t,r){if(null!==e)if(e.memoizedProps!==t.pendingProps||_o.current)wl=!0;else{if(0==(e.lanes&r)&&0==(128&t.flags))return wl=!1,function(e,t,r){switch(t.tag){case 3:_l(t),ha();break;case 5:ii(t);break;case 1:Ao(t.type)&&Uo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,o=t.memoizedProps.value;Lo(ga,n._currentValue),n._currentValue=o;break;case 13:if(null!==(n=t.memoizedState))return null!==n.dehydrated?(Lo(ui,1&ui.current),t.flags|=128,null):0!=(r&t.child.childLanes)?Dl(e,t,r):(Lo(ui,1&ui.current),null!==(e=Hl(e,t,r))?e.sibling:null);Lo(ui,1&ui.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(128&e.flags)){if(n)return $l(e,t,r);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Lo(ui,ui.current),n)break;return null;case 22:case 23:return t.lanes=0,Ol(e,t,r)}return Hl(e,t,r)}(e,t,r);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,qo,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;Wl(e,t),e=t.pendingProps;var o=To(t,jo.current);Oa(t,r),o=ki(null,t,n,e,o,r);var i=Oi();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ao(n)?(i=!0,Uo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ta(t),o.updater=Ga,t.stateNode=o,o._reactInternals=t,Va(t,n,e,r),t=jl(null,t,n,!0,i,r)):(t.tag=0,aa&&i&&ta(t),El(null,t,o,r),t=t.child),t;case 16:n=t.elementType;e:{switch(Wl(e,t),e=t.pendingProps,n=(o=n._init)(n._payload),t.type=n,o=t.tag=function(e){if("function"==typeof e)return Ac(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===C)return 14}return 2}(n),e=va(n,e),o){case 0:t=Ll(null,t,n,e,r);break e;case 1:t=Pl(null,t,n,e,r);break e;case 11:t=xl(null,t,n,e,r);break e;case 14:t=Sl(null,t,n,va(n.type,e),r);break e}throw Error(a(306,n,""))}return t;case 0:return n=t.type,o=t.pendingProps,Ll(e,t,n,o=t.elementType===n?o:va(n,o),r);case 1:return n=t.type,o=t.pendingProps,Pl(e,t,n,o=t.elementType===n?o:va(n,o),r);case 3:e:{if(_l(t),null===e)throw Error(a(387));n=t.pendingProps,o=(i=t.memoizedState).element,Aa(e,t),Da(t,n,null,r);var l=t.memoizedState;if(n=l.element,i.isDehydrated){if(i={element:n,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Cl(e,t,n,r,o=sl(Error(a(423)),t));break e}if(n!==o){t=Cl(e,t,n,r,o=sl(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),na=t,aa=!0,ia=null,r=Xa(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(ha(),n===o){t=Hl(e,t,r);break e}El(e,t,n,r)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),n=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,ro(n,o)?l=null:null!==i&&ro(n,i)&&(t.flags|=32),Nl(e,t),El(e,t,l,r),t.child;case 6:return null===e&&sa(t),null;case 13:return Dl(e,t,r);case 4:return oi(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Ja(t,null,n,r):El(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,xl(e,t,n,o=t.elementType===n?o:va(n,o),r);case 7:return El(e,t,t.pendingProps,r),t.child;case 8:case 12:return El(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Lo(ga,n._currentValue),n._currentValue=l,null!==i)if(ln(i.value,l)){if(i.children===o.children&&!_o.current){t=Hl(e,t,r);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var c=u.firstContext;null!==c;){if(c.context===n){if(1===i.tag){(c=Ra(-1,r&-r)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}i.lanes|=r,null!==(c=i.alternate)&&(c.lanes|=r),ka(i.return,r,t),u.lanes|=r;break}c=c.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=r,null!==(u=l.alternate)&&(u.lanes|=r),ka(l,r,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}El(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=t.pendingProps.children,Oa(t,r),n=n(o=Na(o)),t.flags|=1,El(e,t,n,r),t.child;case 14:return o=va(n=t.type,t.pendingProps),Sl(e,t,n,o=va(n.type,o),r);case 15:return kl(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:va(n,o),Wl(e,t),t.tag=1,Ao(n)?(e=!0,Uo(t)):e=!1,Oa(t,r),Wa(t,n,o),Va(t,n,o,r),jl(null,t,n,!0,e,r);case 19:return $l(e,t,r);case 22:return Ol(e,t,r)}throw Error(a(156,t.tag))};var Qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Kc(e){this._internalRoot=e}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function es(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hc(i);l.call(e)}}Wc(t,i,e,o)}else i=function(e,t,r,n,o){if(o){if("function"==typeof n){var a=n;n=function(){var e=Hc(i);a.call(e)}}var i=$c(t,n,e,0,null,!1,0,"",Zc);return e._reactRootContainer=i,e[mo]=i.current,Gn(8===e.nodeType?e.parentNode:e),fc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof n){var l=n;n=function(){var e=Hc(u);l.call(e)}}var u=Bc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=u,e[mo]=u.current,Gn(8===e.nodeType?e.parentNode:e),fc((function(){Wc(t,u,r,n)})),u}(r,t,e,o,n);return Hc(i)}Kc.prototype.render=Yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Wc(e,t,null,null)},Kc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Wc(null,e,null,null)})),t[mo]=null}},Kc.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var r=0;r<At.length&&0!==t&&t<At[r].priority;r++);At.splice(r,0,e),0===r&&Ut(e)}},Et=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=ft(t.pendingLanes);0!==r&&(gt(t,1|r),oc(t,Je()),0==(6&ju)&&($u=Je()+500,$o()))}break;case 13:fc((function(){var t=_a(e,1);if(null!==t){var r=tc();nc(t,e,1,r)}})),qc(e,1)}},xt=function(e){if(13===e.tag){var t=_a(e,134217728);null!==t&&nc(t,e,134217728,tc()),qc(e,134217728)}},St=function(e){if(13===e.tag){var t=rc(e),r=_a(e,t);null!==r&&nc(r,e,t,tc()),qc(e,t)}},kt=function(){return bt},Ot=function(e,t){var r=bt;try{return bt=e,t()}finally{bt=r}},xe=function(e,t,r){switch(t){case"input":if(X(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=xo(n);if(!o)throw Error(a(90));q(n),X(n,o)}}}break;case"textarea":ae(e,r);break;case"select":null!=(t=r.value)&&re(e,!!r.multiple,t,!1)}},Pe=sc,je=fc;var ts={usingClientEntryPoint:!1,Events:[wo,Eo,xo,Ne,Le,sc]},rs={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ns={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(ns),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jc(t))throw Error(a(200));return function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}(e,t,null,r)},t.createRoot=function(e,t){if(!Jc(e))throw Error(a(299));var r=!1,n="",o=Qc;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Bc(e,1,!1,null,0,r,0,n,o),e[mo]=t.current,Gn(8===e.nodeType?e.parentNode:e),new Yc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,r){if(!Xc(t))throw Error(a(200));return es(null,e,t,!0,r)},t.hydrateRoot=function(e,t,r){if(!Jc(e))throw Error(a(405));var n=null!=r&&r.hydratedSources||null,o=!1,i="",l=Qc;if(null!=r&&(!0===r.unstable_strictMode&&(o=!0),void 0!==r.identifierPrefix&&(i=r.identifierPrefix),void 0!==r.onRecoverableError&&(l=r.onRecoverableError)),t=$c(t,null,e,1,null!=r?r:null,o,0,i,l),e[mo]=t.current,Gn(e),n)for(e=0;e<n.length;e++)o=(o=(r=n[e])._getVersion)(r._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[r,o]:t.mutableSourceEagerHydrationData.push(r,o);return new Kc(t)},t.render=function(e,t,r){if(!Xc(t))throw Error(a(200));return es(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!Xc(e))throw Error(a(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!Xc(r))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,r,!1,n)},t.version="18.2.0-next-9e3b772b8-20220608"},935:(e,t,r)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(448)},408:(e,t)=>{var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||h}function g(){}function b(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=b.prototype=new g;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var E=Array.isArray,x=Object.prototype.hasOwnProperty,S={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,o)&&!k.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:r,type:e,key:i,ref:l,props:a,_owner:S.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var L=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function j(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case r:case n:u=!0}}if(u)return i=i(u=e),e=""===a?"."+P(u,0):a,E(i)?(o="",null!=e&&(o=e.replace(L,"$&/")+"/"),j(i,t,o,"",(function(e){return e}))):null!=i&&(N(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(L,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",E(e))for(var c=0;c<e.length;c++){var s=a+P(l=e[c],c);u+=j(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=j(l=l.value,t,o,s=a+P(l,c++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function _(e,t,r){if(null==e)return e;var n=[],o=0;return j(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function C(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},A={transition:null},R={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:A,ReactCurrentOwner:S};t.Children={map:_,forEach:function(e,t,r){_(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!N(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)x.call(t,c)&&!k.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:r,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=N,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.transition;A.transition={};try{e()}finally{A.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return T.current.useCallback(e,t)},t.useContext=function(e){return T.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return T.current.useDeferredValue(e)},t.useEffect=function(e,t){return T.current.useEffect(e,t)},t.useId=function(){return T.current.useId()},t.useImperativeHandle=function(e,t,r){return T.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return T.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return T.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return T.current.useMemo(e,t)},t.useReducer=function(e,t,r){return T.current.useReducer(e,t,r)},t.useRef=function(e){return T.current.useRef(e)},t.useState=function(e){return T.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return T.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return T.current.useTransition()},t.version="18.2.0"},294:(e,t,r)=>{e.exports=r(408)},53:(e,t)=>{function r(e,t){var r=e.length;e.push(t);e:for(;0<r;){var n=r-1>>>1,o=e[n];if(!(0<a(o,t)))break e;e[n]=t,e[r]=o,r=n}}function n(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length,i=o>>>1;n<i;){var l=2*(n+1)-1,u=e[l],c=l+1,s=e[c];if(0>a(u,r))c<o&&0>a(s,u)?(e[n]=s,e[c]=r,n=c):(e[n]=u,e[l]=r,n=l);else{if(!(c<o&&0>a(s,r)))break e;e[n]=s,e[c]=r,n=c}}}return t}function a(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=n(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,r(c,t)}t=n(s)}}function E(e){if(y=!1,w(e),!m)if(null!==n(c))m=!0,A(x);else{var t=n(s);null!==t&&R(E,t.startTime-e)}}function x(e,r){m=!1,y&&(y=!1,g(N),N=-1),h=!0;var a=p;try{for(w(r),d=n(c);null!==d&&(!(d.expirationTime>r)||e&&!j());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=r);r=t.unstable_now(),"function"==typeof l?d.callback=l:d===n(c)&&o(c),w(r)}else o(c);d=n(c)}if(null!==d)var u=!0;else{var f=n(s);null!==f&&R(E,f.startTime-r),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,k=!1,O=null,N=-1,L=5,P=-1;function j(){return!(t.unstable_now()-P<L)}function _(){if(null!==O){var e=t.unstable_now();P=e;var r=!0;try{r=O(!0,e)}finally{r?S():(k=!1,O=null)}}else k=!1}if("function"==typeof b)S=function(){b(_)};else if("undefined"!=typeof MessageChannel){var C=new MessageChannel,T=C.port2;C.port1.onmessage=_,S=function(){T.postMessage(null)}}else S=function(){v(_,0)};function A(e){O=e,k||(k=!0,S())}function R(e,r){N=v((function(){e(t.unstable_now())}),r)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,A(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return n(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var r=p;p=t;try{return e()}finally{p=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=p;p=e;try{return t()}finally{p=r}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,r(s,e),null===n(c)&&e===n(s)&&(y?(g(N),N=-1):y=!0,R(E,a-i))):(e.sortIndex=l,r(c,e),m||h||(m=!0,A(x))),e},t.unstable_shouldYield=j,t.unstable_wrapCallback=function(e){var t=p;return function(){var r=p;p=t;try{return e.apply(this,arguments)}finally{p=r}}}},840:(e,t,r)=>{e.exports=r(53)}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={exports:{}};return r[e](a,a.exports,o),a.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(r,n){if(1&n&&(r=this(r)),8&n)return r;if("object"==typeof r&&r){if(4&n&&r.__esModule)return r;if(16&n&&"function"==typeof r.then)return r}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&n&&r;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>r[e]));return i.default=()=>r,o.d(a,i),a},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={};o.r(e),o.d(e,{hasBrowserEnv:()=>Ot,hasStandardBrowserEnv:()=>Nt,hasStandardBrowserWebWorkerEnv:()=>Pt});var t,r=o(294),n=o.t(r,2),a=o(935),i=o.t(a,2);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(t||(t={}));const u="popstate";function c(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function f(e,t){return{usr:e.state,key:e.key,idx:t}}function d(e,t,r,n){return void 0===r&&(r=null),l({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:r,key:t&&t.key||n||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:r="",hash:n=""}=e;return r&&"?"!==r&&(t+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(t+="#"===n.charAt(0)?n:"#"+n),t}function h(e){let t={};if(e){let r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));let n=e.indexOf("?");n>=0&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}var m;function y(e,t,r){void 0===r&&(r="/");let n=_(("string"==typeof t?h(t):t).pathname||"/",r);if(null==n)return null;let o=v(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,r)=>e===t[r]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=L(o[e],j(n));return a}function v(e,t,r,n){void 0===t&&(t=[]),void 0===r&&(r=[]),void 0===n&&(n="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(c(i.relativePath.startsWith(n),'Absolute route path "'+i.relativePath+'" nested under path "'+n+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(n.length));let l=R([n,i.relativePath]),u=r.concat(i);e.children&&e.children.length>0&&(c(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),v(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:N(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var r;if(""!==e.path&&null!=(r=e.path)&&r.includes("?"))for(let r of g(e.path))o(e,t,r);else o(e,t)})),t}function g(e){let t=e.split("/");if(0===t.length)return[];let[r,...n]=t,o=r.endsWith("?"),a=r.replace(/\?$/,"");if(0===n.length)return o?[a,""]:[a];let i=g(n.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(m||(m={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const b=/^:\w+$/,w=3,E=2,x=1,S=10,k=-2,O=e=>"*"===e;function N(e,t){let r=e.split("/"),n=r.length;return r.some(O)&&(n+=k),t&&(n+=E),r.filter((e=>!O(e))).reduce(((e,t)=>e+(b.test(t)?w:""===t?x:S)),n)}function L(e,t){let{routesMeta:r}=e,n={},o="/",a=[];for(let e=0;e<r.length;++e){let i=r[e],l=e===r.length-1,u="/"===o?t:t.slice(o.length)||"/",c=P({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!c)return null;Object.assign(n,c.params);let s=i.route;a.push({params:n,pathname:R([o,c.pathname]),pathnameBase:F(R([o,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(o=R([o,c.pathnameBase]))}return a}function P(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[r,n]=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!0),s("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let n=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,r)=>(n.push({paramName:t,isOptional:null!=r}),r?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(n.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),n]}(e.path,e.caseSensitive,e.end),o=t.match(r);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:n.reduce(((e,t,r)=>{let{paramName:n,isOptional:o}=t;if("*"===n){let e=l[r]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const u=l[r];return e[n]=o&&!u?void 0:function(e,t){try{return decodeURIComponent(e)}catch(r){return s(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+r+")."),e}}(u||"",n),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function j(e){try{return decodeURI(e)}catch(t){return s(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function _(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=t.endsWith("/")?t.length-1:t.length,n=e.charAt(r);return n&&"/"!==n?null:e.slice(r)||"/"}function C(e,t,r,n){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(n)+"].  Please separate it out to the `to."+r+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function T(e){return function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e).map(((t,r)=>r===e.length-1?t.pathname:t.pathnameBase))}function A(e,t,r,n){let o;void 0===n&&(n=!1),"string"==typeof e?o=h(e):(o=l({},e),c(!o.pathname||!o.pathname.includes("?"),C("?","pathname","search",o)),c(!o.pathname||!o.pathname.includes("#"),C("#","pathname","hash",o)),c(!o.search||!o.search.includes("#"),C("#","search","hash",o)));let a,i=""===e||""===o.pathname,u=i?"/":o.pathname;if(null==u)a=r;else if(n){let e=t[t.length-1].replace(/^\//,"").split("/");if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e.pop();o.pathname=t.join("/")}a="/"+e.join("/")}else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:r,search:n="",hash:o=""}="string"==typeof e?h(e):e,a=r?r.startsWith("/")?r:function(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?r.length>1&&r.pop():"."!==e&&r.push(e)})),r.length>1?r.join("/"):"/"}(r,t):t;return{pathname:a,search:I(n),hash:U(o)}}(o,a),f=u&&"/"!==u&&u.endsWith("/"),d=(i||"."===u)&&r.endsWith("/");return s.pathname.endsWith("/")||!f&&!d||(s.pathname+="/"),s}const R=e=>e.join("/").replace(/\/\/+/g,"/"),F=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),I=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",U=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const D=["post","put","patch","delete"],z=(new Set(D),["get",...D]);function M(){return M=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},M.apply(this,arguments)}new Set(z),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const B=r.createContext(null),G=r.createContext(null),$=r.createContext(null),W=r.createContext(null),H=r.createContext({outlet:null,matches:[],isDataRoute:!1}),V=r.createContext(null);function q(){return null!=r.useContext(W)}function Q(){return q()||c(!1),r.useContext(W).location}function Y(e){r.useContext($).static||r.useLayoutEffect(e)}function K(){let{isDataRoute:e}=r.useContext(H);return e?function(){let{router:e}=function(e){let t=r.useContext(B);return t||c(!1),t}(oe.UseNavigateStable),t=ie(ae.UseNavigateStable),n=r.useRef(!1);return Y((()=>{n.current=!0})),r.useCallback((function(r,o){void 0===o&&(o={}),n.current&&("number"==typeof r?e.navigate(r):e.navigate(r,M({fromRouteId:t},o)))}),[e,t])}():function(){q()||c(!1);let e=r.useContext(B),{basename:t,navigator:n}=r.useContext($),{matches:o}=r.useContext(H),{pathname:a}=Q(),i=JSON.stringify(T(o)),l=r.useRef(!1);return Y((()=>{l.current=!0})),r.useCallback((function(r,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof r)return void n.go(r);let u=A(r,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==t&&(u.pathname="/"===u.pathname?t:R([t,u.pathname])),(o.replace?n.replace:n.push)(u,o.state,o)}),[t,n,i,a,e])}()}function J(){let{matches:e}=r.useContext(H),t=e[e.length-1];return t?t.params:{}}function X(e,t){let{relative:n}=void 0===t?{}:t,{matches:o}=r.useContext(H),{pathname:a}=Q(),i=JSON.stringify(T(o));return r.useMemo((()=>A(e,JSON.parse(i),a,"path"===n)),[e,i,a,n])}function Z(e,n,o){q()||c(!1);let{navigator:a}=r.useContext($),{matches:i}=r.useContext(H),l=i[i.length-1],u=l?l.params:{},s=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let f,d=Q();if(n){var p;let e="string"==typeof n?h(n):n;"/"===s||(null==(p=e.pathname)?void 0:p.startsWith(s))||c(!1),f=e}else f=d;let m=f.pathname||"/",v=y(e,{pathname:"/"===s?m:m.slice(s.length)||"/"}),g=function(e,t,n){var o;if(void 0===t&&(t=[]),void 0===n&&(n=null),null==e){var a;if(null==(a=n)||!a.errors)return null;e=n.matches}let i=e,l=null==(o=n)?void 0:o.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||c(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,o,a)=>{let u=o.route.id?null==l?void 0:l[o.route.id]:null,c=null;n&&(c=o.route.errorElement||te);let s=t.concat(i.slice(0,a+1)),f=()=>{let t;return t=u?c:o.route.Component?r.createElement(o.route.Component,null):o.route.element?o.route.element:e,r.createElement(ne,{match:o,routeContext:{outlet:e,matches:s,isDataRoute:null!=n},children:t})};return n&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?r.createElement(re,{location:n.location,revalidation:n.revalidation,component:c,error:u,children:f(),routeContext:{outlet:null,matches:s,isDataRoute:!0}}):f()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:R([s,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:R([s,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,o);return n&&g?r.createElement(W.Provider,{value:{location:M({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:t.Pop}},g):g}function ee(){let e=function(){var e;let t=r.useContext(V),n=function(e){let t=r.useContext(G);return t||c(!1),t}(ae.UseRouteError),o=ie(ae.UseRouteError);return t||(null==(e=n.errors)?void 0:e[o])}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return r.createElement(r.Fragment,null,r.createElement("h2",null,"Unexpected Application Error!"),r.createElement("h3",{style:{fontStyle:"italic"}},t),n?r.createElement("pre",{style:o},n):null,null)}const te=r.createElement(ee,null);class re extends r.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?r.createElement(H.Provider,{value:this.props.routeContext},r.createElement(V.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ne(e){let{routeContext:t,match:n,children:o}=e,a=r.useContext(B);return a&&a.static&&a.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=n.route.id),r.createElement(H.Provider,{value:t},o)}var oe=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(oe||{}),ae=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ae||{});function ie(e){let t=function(e){let t=r.useContext(H);return t||c(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||c(!1),n.route.id}function le(e){c(!1)}function ue(e){let{basename:n="/",children:o=null,location:a,navigationType:i=t.Pop,navigator:l,static:u=!1}=e;q()&&c(!1);let s=n.replace(/^\/*/,"/"),f=r.useMemo((()=>({basename:s,navigator:l,static:u})),[s,l,u]);"string"==typeof a&&(a=h(a));let{pathname:d="/",search:p="",hash:m="",state:y=null,key:v="default"}=a,g=r.useMemo((()=>{let e=_(d,s);return null==e?null:{location:{pathname:e,search:p,hash:m,state:y,key:v},navigationType:i}}),[s,d,p,m,y,v,i]);return null==g?null:r.createElement($.Provider,{value:f},r.createElement(W.Provider,{children:o,value:g}))}function ce(e){let{children:t,location:r}=e;return Z(se(t),r)}function se(e,t){void 0===t&&(t=[]);let n=[];return r.Children.forEach(e,((e,o)=>{if(!r.isValidElement(e))return;let a=[...t,o];if(e.type===r.Fragment)return void n.push.apply(n,se(e.props.children,a));e.type!==le&&c(!1),e.props.index&&e.props.children&&c(!1);let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=se(e.props.children,a)),n.push(i)})),n}function fe(){return fe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},fe.apply(this,arguments)}n.startTransition,new Promise((()=>{})),r.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const de=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];new Map;const pe=n.startTransition;function he(e){let{basename:n,children:o,future:a,window:i}=e,s=r.useRef();var h;null==s.current&&(s.current=(void 0===(h={window:i,v5Compat:!0})&&(h={}),function(e,r,n,o){void 0===o&&(o={});let{window:a=document.defaultView,v5Compat:i=!1}=o,s=a.history,h=t.Pop,m=null,y=v();function v(){return(s.state||{idx:null}).idx}function g(){h=t.Pop;let e=v(),r=null==e?null:e-y;y=e,m&&m({action:h,location:w.location,delta:r})}function b(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,r="string"==typeof e?e:p(e);return c(t,"No window.location.(origin|href) available to create URL for href: "+r),new URL(r,t)}null==y&&(y=0,s.replaceState(l({},s.state,{idx:y}),""));let w={get action(){return h},get location(){return e(a,s)},listen(e){if(m)throw new Error("A history only accepts one active listener");return a.addEventListener(u,g),m=e,()=>{a.removeEventListener(u,g),m=null}},createHref:e=>r(a,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,r){h=t.Push;let o=d(w.location,e,r);n&&n(o,e),y=v()+1;let l=f(o,y),u=w.createHref(o);try{s.pushState(l,"",u)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(u)}i&&m&&m({action:h,location:w.location,delta:1})},replace:function(e,r){h=t.Replace;let o=d(w.location,e,r);n&&n(o,e),y=v();let a=f(o,y),l=w.createHref(o);s.replaceState(a,"",l),i&&m&&m({action:h,location:w.location,delta:0})},go:e=>s.go(e)};return w}((function(e,t){let{pathname:r,search:n,hash:o}=e.location;return d("",{pathname:r,search:n,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,h)));let m=s.current,[y,v]=r.useState({action:m.action,location:m.location}),{v7_startTransition:g}=a||{},b=r.useCallback((e=>{g&&pe?pe((()=>v(e))):v(e)}),[v,g]);return r.useLayoutEffect((()=>m.listen(b)),[m,b]),r.createElement(ue,{basename:n,children:o,location:y.location,navigationType:y.action,navigator:m})}i.flushSync;const me="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ye=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ve=r.forwardRef((function(e,t){let n,{onClick:o,relative:a,reloadDocument:i,replace:l,state:u,target:s,to:f,preventScrollReset:d,unstable_viewTransition:h}=e,m=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,de),{basename:y}=r.useContext($),v=!1;if("string"==typeof f&&ye.test(f)&&(n=f,me))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),r=_(t.pathname,y);t.origin===e.origin&&null!=r?f=r+t.search+t.hash:v=!0}catch(e){}let g=function(e,t){let{relative:n}=void 0===t?{}:t;q()||c(!1);let{basename:o,navigator:a}=r.useContext($),{hash:i,pathname:l,search:u}=X(e,{relative:n}),s=l;return"/"!==o&&(s="/"===l?o:R([o,l])),a.createHref({pathname:s,search:u,hash:i})}(f,{relative:a}),b=function(e,t){let{target:n,replace:o,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:u}=void 0===t?{}:t,c=K(),s=Q(),f=X(e,{relative:l});return r.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let r=void 0!==o?o:p(s)===p(f);c(e,{replace:r,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:u})}}),[s,c,f,o,a,n,e,i,l,u])}(f,{replace:l,state:u,target:s,preventScrollReset:d,relative:a,unstable_viewTransition:h});return r.createElement("a",fe({},m,{href:n||g,onClick:v||i?o:function(e){o&&o(e),e.defaultPrevented||b(e)},ref:t,target:s}))}));var ge,be;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ge||(ge={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(be||(be={}));const we={Home:"/",Login:"/login",Registration:"/register",ForgotPassword:"/forgot-password",ResetPassword:"/reset-password",UserProfile:"/profile",Articles:"/articles",Article:"/article/:articleId",AllUsers:"/admin/users",ChangePermissions:"/admin/users/:username",ReportedComments:"/admin/reported-comments"};function Ee(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xe(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?xe(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xe(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Se=(0,r.createContext)(null);const ke=function(e){var t=e.children,n=Ee((0,r.useState)(window.isAuthenticated),2),o=n[0],a=n[1],i=Ee((0,r.useState)(window.userRoles),2),l=i[0],u=i[1],c=Ee((0,r.useState)(window.username),2),s=c[0],f=c[1];return(0,r.useEffect)((function(){console.log("Updated user roles: ".concat(l)),console.log("Updated username: ".concat(s))}),[l,s]),r.createElement(Se.Provider,{value:{isAuthenticated:o,login:function(e,t){a(!0),u(e),f(t)},logout:function(){a(!1),u([]),f("")},userRoles:l,username:s}},t)},Oe={Login:"/UserAccess/Login",Register:"/UserAccess/Register",ForgotPassword:"/UserAccess/ForgotPassword",ResetPassword:"/UserAccess/ResetPassword",Articles:"/Article/Articles",Article:"/Article/Article",Logout:"/UserProfile/Logout",UserProfile:"/UserProfile/UserProfile",UpdateProfile:"/UserProfile/UpdateProfile",UpdatePassword:"/UserProfile/UpdatePassword",UserProfiles:"/UserProfile/UserProfiles",ProfileWithRoles:"/UserProfile/ProfileWithRoles?username=:username",ChangePermissions:"/Admin/ChangeUserRoles"};function Ne(e,t){return function(){return e.apply(t,arguments)}}const{toString:Le}=Object.prototype,{getPrototypeOf:Pe}=Object,je=(_e=Object.create(null),e=>{const t=Le.call(e);return _e[t]||(_e[t]=t.slice(8,-1).toLowerCase())});var _e;const Ce=e=>(e=e.toLowerCase(),t=>je(t)===e),Te=e=>t=>typeof t===e,{isArray:Ae}=Array,Re=Te("undefined"),Fe=Ce("ArrayBuffer"),Ie=Te("string"),Ue=Te("function"),De=Te("number"),ze=e=>null!==e&&"object"==typeof e,Me=e=>{if("object"!==je(e))return!1;const t=Pe(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Be=Ce("Date"),Ge=Ce("File"),$e=Ce("Blob"),We=Ce("FileList"),He=Ce("URLSearchParams");function Ve(e,t,{allOwnKeys:r=!1}={}){if(null==e)return;let n,o;if("object"!=typeof e&&(e=[e]),Ae(e))for(n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else{const o=r?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(n=0;n<a;n++)i=o[n],t.call(null,e[i],i,e)}}function qe(e,t){t=t.toLowerCase();const r=Object.keys(e);let n,o=r.length;for(;o-- >0;)if(n=r[o],t===n.toLowerCase())return n;return null}const Qe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Ye=e=>!Re(e)&&e!==Qe,Ke=(Je="undefined"!=typeof Uint8Array&&Pe(Uint8Array),e=>Je&&e instanceof Je);var Je;const Xe=Ce("HTMLFormElement"),Ze=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),et=Ce("RegExp"),tt=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),n={};Ve(r,((r,o)=>{let a;!1!==(a=t(r,o,e))&&(n[o]=a||r)})),Object.defineProperties(e,n)},rt="abcdefghijklmnopqrstuvwxyz",nt="0123456789",ot={DIGIT:nt,ALPHA:rt,ALPHA_DIGIT:rt+rt.toUpperCase()+nt},at=Ce("AsyncFunction"),it={isArray:Ae,isArrayBuffer:Fe,isBuffer:function(e){return null!==e&&!Re(e)&&null!==e.constructor&&!Re(e.constructor)&&Ue(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||Ue(e.append)&&("formdata"===(t=je(e))||"object"===t&&Ue(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Fe(e.buffer),t},isString:Ie,isNumber:De,isBoolean:e=>!0===e||!1===e,isObject:ze,isPlainObject:Me,isUndefined:Re,isDate:Be,isFile:Ge,isBlob:$e,isRegExp:et,isFunction:Ue,isStream:e=>ze(e)&&Ue(e.pipe),isURLSearchParams:He,isTypedArray:Ke,isFileList:We,forEach:Ve,merge:function e(){const{caseless:t}=Ye(this)&&this||{},r={},n=(n,o)=>{const a=t&&qe(r,o)||o;Me(r[a])&&Me(n)?r[a]=e(r[a],n):Me(n)?r[a]=e({},n):Ae(n)?r[a]=n.slice():r[a]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&Ve(arguments[e],n);return r},extend:(e,t,r,{allOwnKeys:n}={})=>(Ve(t,((t,n)=>{r&&Ue(t)?e[n]=Ne(t,r):e[n]=t}),{allOwnKeys:n}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,r,n)=>{e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject:(e,t,r,n)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],n&&!n(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==r&&Pe(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:je,kindOfTest:Ce,endsWith:(e,t,r)=>{e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;const n=e.indexOf(t,r);return-1!==n&&n===r},toArray:e=>{if(!e)return null;if(Ae(e))return e;let t=e.length;if(!De(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},forEachEntry:(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=r.next())&&!n.done;){const r=n.value;t.call(e,r[0],r[1])}},matchAll:(e,t)=>{let r;const n=[];for(;null!==(r=e.exec(t));)n.push(r);return n},isHTMLForm:Xe,hasOwnProperty:Ze,hasOwnProp:Ze,reduceDescriptors:tt,freezeMethods:e=>{tt(e,((t,r)=>{if(Ue(e)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=e[r];Ue(n)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(e,t)=>{const r={},n=e=>{e.forEach((e=>{r[e]=!0}))};return Ae(e)?n(e):n(String(e).split(t)),r},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,r){return t.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:qe,global:Qe,isContextDefined:Ye,ALPHABET:ot,generateString:(e=16,t=ot.ALPHA_DIGIT)=>{let r="";const{length:n}=t;for(;e--;)r+=t[Math.random()*n|0];return r},isSpecCompliantForm:function(e){return!!(e&&Ue(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),r=(e,n)=>{if(ze(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[n]=e;const o=Ae(e)?[]:{};return Ve(e,((e,t)=>{const a=r(e,n+1);!Re(a)&&(o[t]=a)})),t[n]=void 0,o}}return e};return r(e,0)},isAsyncFn:at,isThenable:e=>e&&(ze(e)||Ue(e))&&Ue(e.then)&&Ue(e.catch)};function lt(e,t,r,n,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),o&&(this.response=o)}it.inherits(lt,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:it.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const ut=lt.prototype,ct={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{ct[e]={value:e}})),Object.defineProperties(lt,ct),Object.defineProperty(ut,"isAxiosError",{value:!0}),lt.from=(e,t,r,n,o,a)=>{const i=Object.create(ut);return it.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),lt.call(i,e.message,t,r,n,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const st=lt;function ft(e){return it.isPlainObject(e)||it.isArray(e)}function dt(e){return it.endsWith(e,"[]")?e.slice(0,-2):e}function pt(e,t,r){return e?e.concat(t).map((function(e,t){return e=dt(e),!r&&t?"["+e+"]":e})).join(r?".":""):t}const ht=it.toFlatObject(it,{},null,(function(e){return/^is[A-Z]/.test(e)})),mt=function(e,t,r){if(!it.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const n=(r=it.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!it.isUndefined(t[e])}))).metaTokens,o=r.visitor||c,a=r.dots,i=r.indexes,l=(r.Blob||"undefined"!=typeof Blob&&Blob)&&it.isSpecCompliantForm(t);if(!it.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(it.isDate(e))return e.toISOString();if(!l&&it.isBlob(e))throw new st("Blob is not supported. Use a Buffer instead.");return it.isArrayBuffer(e)||it.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,r,o){let l=e;if(e&&!o&&"object"==typeof e)if(it.endsWith(r,"{}"))r=n?r:r.slice(0,-2),e=JSON.stringify(e);else if(it.isArray(e)&&function(e){return it.isArray(e)&&!e.some(ft)}(e)||(it.isFileList(e)||it.endsWith(r,"[]"))&&(l=it.toArray(e)))return r=dt(r),l.forEach((function(e,n){!it.isUndefined(e)&&null!==e&&t.append(!0===i?pt([r],n,a):null===i?r:r+"[]",u(e))})),!1;return!!ft(e)||(t.append(pt(o,r,a),u(e)),!1)}const s=[],f=Object.assign(ht,{defaultVisitor:c,convertValue:u,isVisitable:ft});if(!it.isObject(e))throw new TypeError("data must be an object");return function e(r,n){if(!it.isUndefined(r)){if(-1!==s.indexOf(r))throw Error("Circular reference detected in "+n.join("."));s.push(r),it.forEach(r,(function(r,a){!0===(!(it.isUndefined(r)||null===r)&&o.call(t,r,it.isString(a)?a.trim():a,n,f))&&e(r,n?n.concat(a):[a])})),s.pop()}}(e),t};function yt(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function vt(e,t){this._pairs=[],e&&mt(e,this,t)}const gt=vt.prototype;gt.append=function(e,t){this._pairs.push([e,t])},gt.toString=function(e){const t=e?function(t){return e.call(this,t,yt)}:yt;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const bt=vt;function wt(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Et(e,t,r){if(!t)return e;const n=r&&r.encode||wt,o=r&&r.serialize;let a;if(a=o?o(t,r):it.isURLSearchParams(t)?t.toString():new bt(t,r).toString(n),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const xt=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){it.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},St={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},kt={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:bt,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Ot="undefined"!=typeof window&&"undefined"!=typeof document,Nt=(Lt="undefined"!=typeof navigator&&navigator.product,Ot&&["ReactNative","NativeScript","NS"].indexOf(Lt)<0);var Lt;const Pt="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,jt={...e,...kt},_t=function(e){function t(e,r,n,o){let a=e[o++];const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&it.isArray(n)?n.length:a,l?(it.hasOwnProp(n,a)?n[a]=[n[a],r]:n[a]=r,!i):(n[a]&&it.isObject(n[a])||(n[a]=[]),t(e,r,n[a],o)&&it.isArray(n[a])&&(n[a]=function(e){const t={},r=Object.keys(e);let n;const o=r.length;let a;for(n=0;n<o;n++)a=r[n],t[a]=e[a];return t}(n[a])),!i)}if(it.isFormData(e)&&it.isFunction(e.entries)){const r={};return it.forEachEntry(e,((e,n)=>{t(function(e){return it.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),n,r,0)})),r}return null},Ct={transitional:St,adapter:["xhr","http"],transformRequest:[function(e,t){const r=t.getContentType()||"",n=r.indexOf("application/json")>-1,o=it.isObject(e);if(o&&it.isHTMLForm(e)&&(e=new FormData(e)),it.isFormData(e))return n&&n?JSON.stringify(_t(e)):e;if(it.isArrayBuffer(e)||it.isBuffer(e)||it.isStream(e)||it.isFile(e)||it.isBlob(e))return e;if(it.isArrayBufferView(e))return e.buffer;if(it.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return mt(e,new jt.classes.URLSearchParams,Object.assign({visitor:function(e,t,r,n){return jt.isNode&&it.isBuffer(e)?(this.append(t,e.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=it.isFileList(e))||r.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return mt(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||n?(t.setContentType("application/json",!1),function(e,t,r){if(it.isString(e))try{return(0,JSON.parse)(e),it.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Ct.transitional,r=t&&t.forcedJSONParsing,n="json"===this.responseType;if(e&&it.isString(e)&&(r&&!this.responseType||n)){const r=!(t&&t.silentJSONParsing)&&n;try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw st.from(e,st.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:jt.classes.FormData,Blob:jt.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};it.forEach(["delete","get","head","post","put","patch"],(e=>{Ct.headers[e]={}}));const Tt=Ct,At=it.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Rt=Symbol("internals");function Ft(e){return e&&String(e).trim().toLowerCase()}function It(e){return!1===e||null==e?e:it.isArray(e)?e.map(It):String(e)}function Ut(e,t,r,n,o){return it.isFunction(n)?n.call(this,t,r):(o&&(t=r),it.isString(t)?it.isString(n)?-1!==t.indexOf(n):it.isRegExp(n)?n.test(t):void 0:void 0)}class Dt{constructor(e){e&&this.set(e)}set(e,t,r){const n=this;function o(e,t,r){const o=Ft(t);if(!o)throw new Error("header name must be a non-empty string");const a=it.findKey(n,o);(!a||void 0===n[a]||!0===r||void 0===r&&!1!==n[a])&&(n[a||t]=It(e))}const a=(e,t)=>it.forEach(e,((e,r)=>o(e,r,t)));return it.isPlainObject(e)||e instanceof this.constructor?a(e,t):it.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let r,n,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),r=e.substring(0,o).trim().toLowerCase(),n=e.substring(o+1).trim(),!r||t[r]&&At[r]||("set-cookie"===r?t[r]?t[r].push(n):t[r]=[n]:t[r]=t[r]?t[r]+", "+n:n)})),t})(e),t):null!=e&&o(t,e,r),this}get(e,t){if(e=Ft(e)){const r=it.findKey(this,e);if(r){const e=this[r];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(e);)t[n[1]]=n[2];return t}(e);if(it.isFunction(t))return t.call(this,e,r);if(it.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ft(e)){const r=it.findKey(this,e);return!(!r||void 0===this[r]||t&&!Ut(0,this[r],r,t))}return!1}delete(e,t){const r=this;let n=!1;function o(e){if(e=Ft(e)){const o=it.findKey(r,e);!o||t&&!Ut(0,r[o],o,t)||(delete r[o],n=!0)}}return it.isArray(e)?e.forEach(o):o(e),n}clear(e){const t=Object.keys(this);let r=t.length,n=!1;for(;r--;){const o=t[r];e&&!Ut(0,this[o],o,e,!0)||(delete this[o],n=!0)}return n}normalize(e){const t=this,r={};return it.forEach(this,((n,o)=>{const a=it.findKey(r,o);if(a)return t[a]=It(n),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,r)=>t.toUpperCase()+r))}(o):String(o).trim();i!==o&&delete t[o],t[i]=It(n),r[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return it.forEach(this,((r,n)=>{null!=r&&!1!==r&&(t[n]=e&&it.isArray(r)?r.join(", "):r)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const r=new this(e);return t.forEach((e=>r.set(e))),r}static accessor(e){const t=(this[Rt]=this[Rt]={accessors:{}}).accessors,r=this.prototype;function n(e){const n=Ft(e);t[n]||(function(e,t){const r=it.toCamelCase(" "+t);["get","set","has"].forEach((n=>{Object.defineProperty(e,n+r,{value:function(e,r,o){return this[n].call(this,t,e,r,o)},configurable:!0})}))}(r,e),t[n]=!0)}return it.isArray(e)?e.forEach(n):n(e),this}}Dt.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),it.reduceDescriptors(Dt.prototype,(({value:e},t)=>{let r=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[r]=e}}})),it.freezeMethods(Dt);const zt=Dt;function Mt(e,t){const r=this||Tt,n=t||r,o=zt.from(n.headers);let a=n.data;return it.forEach(e,(function(e){a=e.call(r,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Bt(e){return!(!e||!e.__CANCEL__)}function Gt(e,t,r){st.call(this,null==e?"canceled":e,st.ERR_CANCELED,t,r),this.name="CanceledError"}it.inherits(Gt,st,{__CANCEL__:!0});const $t=Gt,Wt=jt.hasStandardBrowserEnv?{write(e,t,r,n,o,a){const i=[e+"="+encodeURIComponent(t)];it.isNumber(r)&&i.push("expires="+new Date(r).toGMTString()),it.isString(n)&&i.push("path="+n),it.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Ht(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Vt=jt.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let r;function n(r){let n=r;return e&&(t.setAttribute("href",n),n=t.href),t.setAttribute("href",n),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return r=n(window.location.href),function(e){const t=it.isString(e)?n(e):e;return t.protocol===r.protocol&&t.host===r.host}}():function(){return!0};function qt(e,t){let r=0;const n=function(e,t){e=e||10;const r=new Array(e),n=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const u=Date.now(),c=n[i];o||(o=u),r[a]=l,n[a]=u;let s=i,f=0;for(;s!==a;)f+=r[s++],s%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),u-o<t)return;const d=c&&u-c;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-r,u=n(l);r=a;const c={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:u||void 0,estimated:u&&i&&a<=i?(i-a)/u:void 0,event:o};c[t?"download":"upload"]=!0,e(c)}}const Qt={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,r){let n=e.data;const o=zt.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:u}=e;function c(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(it.isFormData(n))if(jt.hasStandardBrowserEnv||jt.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let s=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",r=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+r))}const f=Ht(e.baseURL,e.url);function d(){if(!s)return;const n=zt.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());!function(e,t,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(new st("Request failed with status code "+r.status,[st.ERR_BAD_REQUEST,st.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}((function(e){t(e),c()}),(function(e){r(e),c()}),{data:l&&"text"!==l&&"json"!==l?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:n,config:e,request:s}),s=null}if(s.open(e.method.toUpperCase(),Et(f,e.params,e.paramsSerializer),!0),s.timeout=e.timeout,"onloadend"in s?s.onloadend=d:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(d)},s.onabort=function(){s&&(r(new st("Request aborted",st.ECONNABORTED,e,s)),s=null)},s.onerror=function(){r(new st("Network Error",st.ERR_NETWORK,e,s)),s=null},s.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const n=e.transitional||St;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(new st(t,n.clarifyTimeoutError?st.ETIMEDOUT:st.ECONNABORTED,e,s)),s=null},jt.hasStandardBrowserEnv&&(u&&it.isFunction(u)&&(u=u(e)),u||!1!==u&&Vt(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&Wt.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===n&&o.setContentType(null),"setRequestHeader"in s&&it.forEach(o.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),it.isUndefined(e.withCredentials)||(s.withCredentials=!!e.withCredentials),l&&"json"!==l&&(s.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&s.addEventListener("progress",qt(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",qt(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{s&&(r(!t||t.type?new $t(null,e,s):t),s.abort(),s=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);p&&-1===jt.protocols.indexOf(p)?r(new st("Unsupported protocol "+p+":",st.ERR_BAD_REQUEST,e)):s.send(n||null)}))}};it.forEach(Qt,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Yt=e=>`- ${e}`,Kt=e=>it.isFunction(e)||null===e||!1===e,Jt=e=>{e=it.isArray(e)?e:[e];const{length:t}=e;let r,n;const o={};for(let a=0;a<t;a++){let t;if(r=e[a],n=r,!Kt(r)&&(n=Qt[(t=String(r)).toLowerCase()],void 0===n))throw new st(`Unknown adapter '${t}'`);if(n)break;o[t||"#"+a]=n}if(!n){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let r=t?e.length>1?"since :\n"+e.map(Yt).join("\n"):" "+Yt(e[0]):"as no adapter specified";throw new st("There is no suitable adapter to dispatch the request "+r,"ERR_NOT_SUPPORT")}return n};function Xt(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new $t(null,e)}function Zt(e){return Xt(e),e.headers=zt.from(e.headers),e.data=Mt.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Jt(e.adapter||Tt.adapter)(e).then((function(t){return Xt(e),t.data=Mt.call(e,e.transformResponse,t),t.headers=zt.from(t.headers),t}),(function(t){return Bt(t)||(Xt(e),t&&t.response&&(t.response.data=Mt.call(e,e.transformResponse,t.response),t.response.headers=zt.from(t.response.headers))),Promise.reject(t)}))}const er=e=>e instanceof zt?e.toJSON():e;function tr(e,t){t=t||{};const r={};function n(e,t,r){return it.isPlainObject(e)&&it.isPlainObject(t)?it.merge.call({caseless:r},e,t):it.isPlainObject(t)?it.merge({},t):it.isArray(t)?t.slice():t}function o(e,t,r){return it.isUndefined(t)?it.isUndefined(e)?void 0:n(void 0,e,r):n(e,t,r)}function a(e,t){if(!it.isUndefined(t))return n(void 0,t)}function i(e,t){return it.isUndefined(t)?it.isUndefined(e)?void 0:n(void 0,e):n(void 0,t)}function l(r,o,a){return a in t?n(r,o):a in e?n(void 0,r):void 0}const u={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(er(e),er(t),!0)};return it.forEach(Object.keys(Object.assign({},e,t)),(function(n){const a=u[n]||o,i=a(e[n],t[n],n);it.isUndefined(i)&&a!==l||(r[n]=i)})),r}const rr={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{rr[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));const nr={};rr.transitional=function(e,t,r){function n(e,t){return"[Axios v1.6.2] Transitional option '"+e+"'"+t+(r?". "+r:"")}return(r,o,a)=>{if(!1===e)throw new st(n(o," has been removed"+(t?" in "+t:"")),st.ERR_DEPRECATED);return t&&!nr[o]&&(nr[o]=!0,console.warn(n(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,o,a)}};const or={assertOptions:function(e,t,r){if("object"!=typeof e)throw new st("options must be an object",st.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let o=n.length;for(;o-- >0;){const a=n[o],i=t[a];if(i){const t=e[a],r=void 0===t||i(t,a,e);if(!0!==r)throw new st("option "+a+" must be "+r,st.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new st("Unknown option "+a,st.ERR_BAD_OPTION)}},validators:rr},ar=or.validators;class ir{constructor(e){this.defaults=e,this.interceptors={request:new xt,response:new xt}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=tr(this.defaults,t);const{transitional:r,paramsSerializer:n,headers:o}=t;void 0!==r&&or.assertOptions(r,{silentJSONParsing:ar.transitional(ar.boolean),forcedJSONParsing:ar.transitional(ar.boolean),clarifyTimeoutError:ar.transitional(ar.boolean)},!1),null!=n&&(it.isFunction(n)?t.paramsSerializer={serialize:n}:or.assertOptions(n,{encode:ar.function,serialize:ar.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&it.merge(o.common,o[t.method]);o&&it.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=zt.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const u=[];let c;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let s,f=0;if(!l){const e=[Zt.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,u),s=e.length,c=Promise.resolve(t);f<s;)c=c.then(e[f++],e[f++]);return c}s=i.length;let d=t;for(f=0;f<s;){const e=i[f++],t=i[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{c=Zt.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,s=u.length;f<s;)c=c.then(u[f++],u[f++]);return c}getUri(e){return Et(Ht((e=tr(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}it.forEach(["delete","get","head","options"],(function(e){ir.prototype[e]=function(t,r){return this.request(tr(r||{},{method:e,url:t,data:(r||{}).data}))}})),it.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,o){return this.request(tr(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}ir.prototype[e]=t(),ir.prototype[e+"Form"]=t(!0)}));const lr=ir;class ur{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const r=this;this.promise.then((e=>{if(!r._listeners)return;let t=r._listeners.length;for(;t-- >0;)r._listeners[t](e);r._listeners=null})),this.promise.then=e=>{let t;const n=new Promise((e=>{r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e,n,o){r.reason||(r.reason=new $t(e,n,o),t(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new ur((function(t){e=t})),cancel:e}}}const cr=ur,sr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(sr).forEach((([e,t])=>{sr[t]=e}));const fr=sr,dr=function e(t){const r=new lr(t),n=Ne(lr.prototype.request,r);return it.extend(n,lr.prototype,r,{allOwnKeys:!0}),it.extend(n,r,null,{allOwnKeys:!0}),n.create=function(r){return e(tr(t,r))},n}(Tt);dr.Axios=lr,dr.CanceledError=$t,dr.CancelToken=cr,dr.isCancel=Bt,dr.VERSION="1.6.2",dr.toFormData=mt,dr.AxiosError=st,dr.Cancel=dr.CanceledError,dr.all=function(e){return Promise.all(e)},dr.spread=function(e){return function(t){return e.apply(null,t)}},dr.isAxiosError=function(e){return it.isObject(e)&&!0===e.isAxiosError},dr.mergeConfig=tr,dr.AxiosHeaders=zt,dr.formToJSON=e=>_t(it.isHTMLForm(e)?new FormData(e):e),dr.getAdapter=Jt,dr.HttpStatusCode=fr,dr.default=dr;const pr=dr,hr=function(){return r.createElement("div",{className:"d-flex justify-content-center align-items-center",style:{height:"100vh"}},r.createElement("div",{className:"spinner-border",role:"status"},r.createElement("span",{className:"visually-hidden"},"Loading...")))};function mr(e){return mr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},mr(e)}function yr(){yr=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==mr(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(mr(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function vr(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function gr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return br(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?br(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function br(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const wr=function(){var e=gr((0,r.useState)(""),2),t=e[0],n=e[1],o=gr((0,r.useState)([]),2),a=o[0],i=o[1],l=gr((0,r.useState)([]),2),u=l[0],c=l[1],s=gr((0,r.useState)([]),2),f=s[0],d=s[1],p=gr((0,r.useState)(!1),2),h=p[0],m=p[1],y=K();return(0,r.useEffect)((function(){var e=function(){var e,t=(e=yr().mark((function e(){var t,r;return yr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return m(!0),e.prev=1,e.next=4,pr.get("/Home/Home");case 4:t=e.sent,r=t.data.homePageViewModel,i(r.lastFiveArticles||[]),c(r.topThreeArticlesByRank||[]),d(r.lastThreeCommentedArticles||[]),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),console.error("Error fetching articles:",e.t0);case 14:m(!1);case 15:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){vr(a,n,o,i,l,"next",e)}function l(e){vr(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();e()}),[]),h?r.createElement(hr,null):r.createElement(r.Fragment,null,r.createElement("div",{className:"container mt-4",style:{maxWidth:"600px",marginBottom:"20px"}},r.createElement("div",{style:{display:"flex",justifyContent:"space-between"}},r.createElement("input",{type:"text",placeholder:"Search articles by title",style:{flexGrow:1,marginRight:"10px"},onChange:function(e){n(e.target.value)}}),r.createElement("button",{className:"btn btn-secondary",onClick:function(){y("".concat(we.Articles,"?title=").concat(encodeURIComponent(t)))}},"Search"))),r.createElement("div",{className:"container mt-4",style:{display:"flex",justifyContent:"space-around",maxWidth:"1200px"}},r.createElement("div",{style:{width:"30%"}},r.createElement("h3",{className:"text-truncate"},"Last 5 Articles"),r.createElement("ul",{className:"list-group"},a.map((function(e){return r.createElement("li",{key:e.id,className:"list-group-item",style:{marginBottom:"20px",borderTop:"1px solid rgba(0,0,0,.125)"}}," ",r.createElement(ve,{to:we.Article.replace(":articleId",e.id),className:"text-truncate"},r.createElement("h5",{className:"text-truncate"},e.title)),r.createElement("p",null,"Author: ",e.author),r.createElement("p",null,"Rating: ",e.rating))})))),r.createElement("div",{style:{width:"30%"}},r.createElement("h3",{className:"text-truncate"},"Top 3 Articles"),r.createElement("ul",{className:"list-group"},u.map((function(e){return r.createElement("li",{key:e.id,className:"list-group-item",style:{marginBottom:"20px",borderTop:"1px solid rgba(0,0,0,.125)"}}," ",r.createElement(ve,{to:we.Article.replace(":articleId",e.id),className:"text-truncate"},r.createElement("h5",{className:"text-truncate"},e.title)),r.createElement("p",null,"Author: ",e.author),r.createElement("p",null,"Rating: ",e.rating))})))),r.createElement("div",{style:{width:"30%"}},r.createElement("h3",{className:"text-truncate"},"Last 3 Commented Articles"),r.createElement("ul",{className:"list-group"},f.map((function(e){return r.createElement("li",{key:e.id,className:"list-group-item",style:{marginBottom:"20px",borderTop:"1px solid rgba(0,0,0,.125)"}}," ",r.createElement(ve,{to:we.Article.replace(":articleId",e.id),className:"text-truncate"},r.createElement("h5",{className:"text-truncate"},e.title)),r.createElement("p",null,"Author: ",e.author),r.createElement("p",null,"Rating: ",e.rating))}))))))};function Er(e){return Er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Er(e)}function xr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Sr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?xr(Object(r),!0).forEach((function(t){kr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):xr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function kr(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==Er(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Er(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Er(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Or(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Nr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Nr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Lr=function(){var e=K(),t=(0,r.useContext)(Se),n=t.login,o=t.isAuthenticated,a=Or((0,r.useState)({username:"",password:""}),2),i=a[0],l=a[1],u=Or((0,r.useState)({}),2),c=u[0],s=u[1];function f(e){var t=e.target,r=t.name,n=t.value;l((function(e){return Sr(Sr({},e),{},kr({},r,n))}))}return o?r.createElement(wr,null):r.createElement("div",{className:"d-flex justify-content-center align-items-center mt-3 mb-3"},r.createElement("form",{onSubmit:function(t){t.preventDefault();var r={Username:i.username,Password:i.password};pr.post(Oe.Login,r).then((function(t){var o=t.data;o.success?(n(o.userRoles,r.Username),e(we.Home)):s({serverError:o.errorMessage})})).catch((function(e){var t=e.response?e.response.data.errorMessage:"There was a problem submitting the form.";s({serverError:t})}))},className:"px-4 pb-4 shadow-sm bg-dark mx-auto rounded",style:{width:"500px",maxWidth:"500px"}},r.createElement("h4",{className:"text-center mb-3 mt-3 pt-3 pb-3 text-light"},"Login to your account"),c.serverError&&r.createElement("div",{className:"alert alert-danger text-center mb-3",role:"alert"},c.serverError),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"text",name:"username",value:i.username,onChange:f,className:"form-control",placeholder:"Username"})),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"password",name:"password",value:i.password,onChange:f,className:"form-control",placeholder:"Password"})),r.createElement("div",{className:"form-group d-grid col-6 mx-auto"},r.createElement("button",{type:"submit",className:"btn btn-primary mb-3"},"Login"),r.createElement(ve,{className:"btn btn-secondary",to:we.ForgotPassword},"Forgot password?"))))};function Pr(e){return Pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pr(e)}function jr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function _r(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?jr(Object(r),!0).forEach((function(t){Cr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):jr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Cr(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==Pr(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Pr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Pr(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Tr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ar(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ar(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ar(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Rr=function(){var e=K(),t=(0,r.useContext)(Se),n=t.login,o=t.isAuthenticated,a=Tr((0,r.useState)({username:"",email:"",password:"",confirmPassword:""}),2),i=a[0],l=a[1],u=Tr((0,r.useState)({}),2),c=u[0],s=u[1];function f(e){var t=e.target,r=t.name,n=t.value;l(_r(_r({},i),{},Cr({},r,n)))}return o?r.createElement(wr,null):r.createElement("div",{className:"d-flex justify-content-center align-items-center mt-3 mb-3"},r.createElement("form",{action:"/UserAccess/Register",method:"post",onSubmit:function(t){if(t.preventDefault(),function(){var e=i.username,t=i.email,r=i.password,n=i.confirmPassword,o={},a=!0;return e?e.length>30?(a=!1,o.username="Username cannot be longer than 30 characters."):/^[a-zA-Z0-9_]+$/.test(e)||(a=!1,o.username="Username can only contain letters, numbers, and underscores."):(a=!1,o.username="Username is required."),t?/\S+@\S+\.\S+/.test(t)||(a=!1,o.email="Invalid Email Address."):(a=!1,o.email="Email is required."),r?r.length<6||r.length>100?(a=!1,o.password="Password must be between 6 and 100 characters."):/^(?=.*\W)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?!.*\s).+$/.test(r)||(a=!1,o.password="Password must contain at least one non-alphanumeric character, one digit, one uppercase letter, and one lowercase letter without spaces."):(a=!1,o.password="Password is required."),r!==n&&(a=!1,o.confirmPassword="Password and Confirmation Password must match."),s(o),a}()){var r={Username:i.username,Email:i.email,Password:i.password,ConfirmPassword:i.confirmPassword};pr.post(Oe.Register,r).then((function(t){var o=t.data;o.success?(e(we.Home),n(o.userRoles,r.Username)):s({serverError:o.errors})})).catch((function(e){var t=e.response?e.response.data.errors||e.response.data.message:["There was a problem submitting the form."];s({serverError:t})}))}},className:"px-4 pb-4 shadow-sm bg-dark mx-auto rounded",style:{width:"500px",maxWidth:"500px"}},r.createElement("h4",{className:"text-center mb-3 mt-3 pt-3 pb-3 text-light"},"Register a new account"),c.serverError&&r.createElement("div",{className:"alert alert-danger text-center mb-3",role:"alert"},c.serverError),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"text",name:"username",value:i.username,onChange:f,className:"form-control ".concat(c.username?"is-invalid":""),placeholder:"Username"}),c.username&&r.createElement("div",{className:"invalid-feedback"},c.username)),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"email",name:"email",value:i.email,onChange:f,className:"form-control ".concat(c.email?"is-invalid":""),placeholder:"Email"}),c.email&&r.createElement("div",{className:"invalid-feedback"},c.email)),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"password",name:"password",value:i.password,onChange:f,className:"form-control ".concat(c.password?"is-invalid":""),placeholder:"Password"}),c.password&&r.createElement("div",{className:"invalid-feedback"},c.password)),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"password",name:"confirmPassword",value:i.confirmPassword,onChange:f,className:"form-control ".concat(c.confirmPassword?"is-invalid":""),placeholder:"Repeat password"}),c.confirmPassword&&r.createElement("div",{className:"invalid-feedback"},c.confirmPassword)),r.createElement("div",{className:"form-group d-grid col-6 mx-auto"},r.createElement("button",{type:"submit",className:"btn btn-primary"},"Sign up"))))};function Fr(e){return Fr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fr(e)}function Ir(){Ir=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Fr(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Fr(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Ur(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Dr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?zr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Mr=function(){var e=(0,r.useContext)(Se).isAuthenticated,t=Dr((0,r.useState)(""),2),n=t[0],o=t[1],a=Dr((0,r.useState)(""),2),i=a[0],l=a[1],u=Dr((0,r.useState)(null),2),c=u[0],s=u[1],f=Dr((0,r.useState)(null),2),d=f[0],p=f[1],h=function(){var e,t=(e=Ir().mark((function e(t){var r,o,a;return Ir().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),r={Username:i,Email:n},e.prev=2,e.next=5,pr.post(Oe.ForgotPassword,r);case 5:return o=e.sent,e.next=8,o.data;case 8:a=e.sent,s(a.message),p(a.success),e.next=17;break;case 13:e.prev=13,e.t0=e.catch(2),s("An error occurred while trying to send reset link."),p(!1);case 17:case"end":return e.stop()}}),e,null,[[2,13]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Ur(a,n,o,i,l,"next",e)}function l(e){Ur(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return e?r.createElement(wr,null):r.createElement("div",{className:"container mt-5 pt-5"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-sm-8 col-md-6 m-auto"},r.createElement("div",{className:"card border-0 shadow bg-dark box-shadow"},r.createElement("h4",{className:"text-center mb-2 mt-3 text-light"},"Forgot your password?"),r.createElement("div",{className:"card-body text-center"},c&&r.createElement("div",{className:"alert ".concat(d?"alert-success":"alert-danger")},c),r.createElement("form",{onSubmit:h},r.createElement("div",{className:"form-outline"},r.createElement("input",{type:"username",className:"form-control",placeholder:"Username",value:i,onChange:function(e){return l(e.target.value)},required:!0})),r.createElement("div",{className:"form-outline my-4 py-2"},r.createElement("input",{type:"email",className:"form-control",placeholder:"Email Address",value:n,onChange:function(e){return o(e.target.value)},required:!0})),r.createElement("button",{type:"submit",className:"btn btn-primary"},"Submit")))))))},Br=function(){return r.createElement("div",{className:"d-flex flex-column justify-content-center align-items-center vh-100"},r.createElement("img",{src:"/images/404.png",className:"img-fluid",alt:"404",style:{width:"250px"}}),r.createElement("h1",null,"Page not found."))};function Gr(e){return Gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gr(e)}function $r(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Wr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?$r(Object(r),!0).forEach((function(t){Hr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):$r(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Hr(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==Gr(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Gr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Gr(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Vr(){Vr=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Gr(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Gr(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function qr(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Qr(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){qr(a,n,o,i,l,"next",e)}function l(e){qr(a,n,o,i,l,"throw",e)}i(void 0)}))}}function Yr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Kr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Jr=function(){var e=Yr((0,r.useState)({}),2),t=e[0],n=e[1],o=Yr((0,r.useState)(null),2),a=o[0],i=o[1],l=Yr((0,r.useState)(!1),2),u=l[0],c=l[1],s=Yr((0,r.useState)(null),2),f=s[0],d=s[1],p=Q(),h=new URLSearchParams(p.search),m=Yr((0,r.useState)({token:encodeURIComponent(h.get("token")),email:encodeURIComponent(h.get("email")),newPassword:"",confirmPassword:""}),2),y=m[0],v=m[1];function g(){var e=y.newPassword,t=y.confirmPassword,r={},o=!0;return e?e.length<6||e.length>100?(o=!1,r.newPassword="New Password must be between 6 and 100 characters."):/^(?=.*\W)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?!.*\s).+$/.test(e)||(o=!1,r.newPassword="New Password must contain at least one non-alphanumeric character, one digit, one uppercase letter, and one lowercase letter without spaces."):(o=!1,r.newPassword="New Password is required."),e!==t&&(o=!1,r.confirmPassword="New Password and Confirm Password must match."),n(r),o}(0,r.useEffect)((function(){if(y.token&&y.email){var e=function(){var e=Qr(Vr().mark((function e(){var t,r;return Vr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.get("".concat(Oe.ResetPassword,"?token=").concat(y.token,"&email=").concat(y.email));case 3:t=e.sent,r=t.data,d(r.isTokenAndEmailValid),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),d(!1);case 11:case"end":return e.stop()}}),e,null,[[0,8]])})));return function(){return e.apply(this,arguments)}}();e()}else d(!1)}),[]);var b=function(e){v(Wr(Wr({},y),{},Hr({},e.target.name,e.target.value)))},w=function(){var e=Qr(Vr().mark((function e(t){var r;return Vr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),g()){e.next=3;break}return e.abrupt("return");case 3:return e.prev=3,e.next=6,pr.post("/UserAccess/ResetPassword",y);case 6:r=e.sent,i(r.data.message),c(r.data.success),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(3),i("Failed resetting password. Try again later!"),c(!1);case 15:case"end":return e.stop()}}),e,null,[[3,11]])})));return function(t){return e.apply(this,arguments)}}();return null===f?r.createElement(hr,null):!1===f?r.createElement(Br,null):r.createElement("div",{className:"d-flex justify-content-center align-items-center mt-3 mb-3"},r.createElement("form",{onSubmit:w,className:"px-4 pb-4 shadow-sm bg-dark mx-auto rounded",style:{width:"500px",maxWidth:"500px"}},r.createElement("h4",{className:"text-center mb-3 mt-3 pt-3 pb-3 text-light"},"Reset Password"),a&&r.createElement("div",{className:"alert ".concat(u?"alert-success":"alert-danger"," text-center mb-3"),role:"alert"},a),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"password",name:"newPassword",value:y.newPassword,onChange:b,className:"form-control ".concat(t.newPassword?"is-invalid":""),placeholder:"New Password"}),t.newPassword&&r.createElement("div",{className:"invalid-feedback"},t.newPassword)),r.createElement("div",{className:"form-group mb-3"},r.createElement("input",{type:"password",name:"confirmPassword",value:y.confirmPassword,onChange:b,className:"form-control ".concat(t.confirmPassword?"is-invalid":""),placeholder:"Confirm Password"}),t.confirmPassword&&r.createElement("div",{className:"invalid-feedback"},t.confirmPassword)),r.createElement("div",{className:"form-group d-grid col-6 mx-auto"},r.createElement("button",{type:"submit",className:"btn btn-primary"},"Reset Password"))))},Xr=function(e){var t=e.message,n=e.show,o=e.onClose;return(0,r.useEffect)((function(){var e;return n&&(e=setTimeout((function(){o()}),3e3)),function(){return clearTimeout(e)}}),[n,o]),n?r.createElement("div",{className:"alert alert-success alert-dismissible fade show",role:"alert",style:{position:"fixed",top:"0.5rem",left:"50%",transform:"translateX(-50%)",zIndex:1050}},r.createElement("strong",null,t)):null};function Zr(e){return Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zr(e)}function en(){en=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Zr(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Zr(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function tn(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function rn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?nn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const on=function(e){var t=e.isOpen,n=e.toggleModal,o=e.updateUsername,a=e.currentUsername,i=rn((0,r.useState)(a),2),l=i[0],u=i[1],c=rn((0,r.useState)({}),2),s=c[0],f=c[1],d=rn((0,r.useState)(null),2),p=d[0],h=d[1],m=rn((0,r.useState)(!1),2),y=m[0],v=m[1];(0,r.useEffect)((function(){t||(h(null),u(a))}),[t,a]);var g=function(){var e,t=(e=en().mark((function e(t){var r,i;return en().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),u=void 0,c=void 0,u={},c=!0,l?l.length>30?(c=!1,u.username="Username cannot be longer than 30 characters."):/^[a-zA-Z0-9_]+$/.test(l)?a===l&&(c=!1,u.username="Can't change to your own username"):(c=!1,u.username="Username can only contain letters, numbers, and underscores."):(c=!1,u.username="Username is required."),f(u),!c){e.next=13;break}return e.prev=2,e.next=5,pr.post(Oe.UpdateProfile,{UserName:l});case 5:r=e.sent,(i=r.data).success?(o(l),n(),v(!0)):h(i.errorMessage),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(2),h("Problem with changing information. Try again later!");case 13:case"end":return e.stop()}var u,c}),e,null,[[2,10]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){tn(a,n,o,i,l,"next",e)}function l(e){tn(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return r.createElement(r.Fragment,null,t&&r.createElement("div",{className:"modal-backdrop show",style:{backgroundColor:"rgba(0,0,0,0.9)"}}),r.createElement("div",{className:"modal ".concat(t?"d-block":"d-none"),tabIndex:"-1",style:{display:"block"}},r.createElement("div",{className:"modal-dialog modal-dialog-centered"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Change Profile Information"),r.createElement("button",{type:"button",className:"btn-close",onClick:n})),r.createElement("div",{className:"modal-body"},p&&r.createElement("div",{className:"alert alert-danger text-center mb-3",role:"alert"},p),r.createElement("form",{onSubmit:g},r.createElement("div",{className:"mb-3"},r.createElement("label",{htmlFor:"username",className:"form-label"},"Username"),r.createElement("input",{type:"text",className:"form-control ".concat(s.username?"is-invalid":""),id:"username",value:l,onChange:function(e){return u(e.target.value)}}),r.createElement("div",{className:"invalid-feedback"},s.username)),r.createElement("div",{className:"modal-footer justify-content-between"},r.createElement("button",{type:"button",className:"btn btn-secondary",onClick:n},"Cancel"),r.createElement("button",{type:"submit",className:"btn btn-primary"},"Change Information"))))))),r.createElement(Xr,{message:"Profile has been changed successfully!",show:y,onClose:function(){return v(!1)}}))};function an(e){return an="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},an(e)}function ln(){ln=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==an(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(an(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function un(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function cn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return sn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?sn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const fn=function(e){var t=e.isOpen,n=e.toggleModal,o=cn((0,r.useState)(""),2),a=o[0],i=o[1],l=cn((0,r.useState)(""),2),u=l[0],c=l[1],s=cn((0,r.useState)(""),2),f=s[0],d=s[1],p=cn((0,r.useState)({}),2),h=p[0],m=p[1],y=cn((0,r.useState)(null),2),v=y[0],g=y[1],b=cn((0,r.useState)(!1),2),w=b[0],E=b[1];(0,r.useEffect)((function(){t||(g(null),i(""),c(""),d(""))}),[t]);var x=function(){var e,t=(e=ln().mark((function e(t){var r,o;return ln().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),i=void 0,l=void 0,i={},l=!0,a||(l=!1,i.currentPassword="Current password is required."),u?u.length<6||u.length>100?(l=!1,i.newPassword="New password must be between 6 and 100 characters."):/^(?=.*\W)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?!.*\s).+$/.test(u)||(l=!1,i.newPassword="New password must contain at least one non-alphanumeric character, one digit, one uppercase letter, and one lowercase letter without spaces."):(l=!1,i.newPassword="New password is required."),u!==f&&(l=!1,i.confirmNewPassword="New password and confirmation password must match."),m(i),!l){e.next=13;break}return e.prev=2,e.next=5,pr.post(Oe.UpdatePassword,{CurrentPassword:a,NewPassword:u,ConfirmPassword:f});case 5:r=e.sent,(o=r.data).success?(n(),E(!0)):g(o.errorMessage),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(2),g("There was a problem updating the password. Try again later.");case 13:case"end":return e.stop()}var i,l}),e,null,[[2,10]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){un(a,n,o,i,l,"next",e)}function l(e){un(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return r.createElement(r.Fragment,null,t&&r.createElement("div",{className:"modal-backdrop show",style:{backgroundColor:"rgba(0,0,0,0.5)"}}),r.createElement("div",{className:"modal ".concat(t?"d-block":"d-none"),tabIndex:"-1",style:{display:"block"}},r.createElement("div",{className:"modal-dialog modal-dialog-centered"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Change Password"),r.createElement("button",{type:"button",className:"btn-close",onClick:n})),r.createElement("div",{className:"modal-body"},v&&r.createElement("div",{className:"alert alert-danger text-center mb-3",role:"alert"},v),r.createElement("form",{onSubmit:x},r.createElement("div",{className:"mb-3"},r.createElement("label",{htmlFor:"currentPassword",className:"form-label"},"Current Password"),r.createElement("input",{type:"password",className:"form-control ".concat(h.currentPassword?"is-invalid":""),id:"currentPassword",value:a,onChange:function(e){return i(e.target.value)}}),r.createElement("div",{className:"invalid-feedback"},h.currentPassword)),r.createElement("div",{className:"mb-3"},r.createElement("label",{htmlFor:"newPassword",className:"form-label"},"New Password"),r.createElement("input",{type:"password",className:"form-control ".concat(h.newPassword?"is-invalid":""),id:"newPassword",value:u,onChange:function(e){return c(e.target.value)}}),r.createElement("div",{className:"invalid-feedback"},h.newPassword)),r.createElement("div",{className:"mb-3"},r.createElement("label",{htmlFor:"confirmNewPassword",className:"form-label"},"Confirm New Password"),r.createElement("input",{type:"password",className:"form-control ".concat(h.confirmNewPassword?"is-invalid":""),id:"confirmNewPassword",value:f,onChange:function(e){return d(e.target.value)}}),r.createElement("div",{className:"invalid-feedback"},h.confirmNewPassword)),r.createElement("div",{className:"modal-footer justify-content-between"},r.createElement("button",{type:"button",className:"btn btn-secondary",onClick:n},"Cancel"),r.createElement("button",{type:"submit",className:"btn btn-primary"},"Change Password"))))))),r.createElement(Xr,{message:"Password was changed successfully!",show:w,onClose:function(){return E(!1)}}))};function dn(e){return dn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dn(e)}function pn(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function hn(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?pn(Object(r),!0).forEach((function(t){var n,o,a;n=e,o=t,a=r[t],(o=function(e){var t=function(e,t){if("object"!==dn(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==dn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dn(t)?t:String(t)}(o))in n?Object.defineProperty(n,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):pn(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function mn(){mn=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==dn(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(dn(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function yn(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function vn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?gn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const bn=function(){var e=vn((0,r.useState)(null),2),t=e[0],n=e[1],o=(0,r.useContext)(Se).isAuthenticated,a=vn((0,r.useState)(!1),2),i=a[0],l=a[1],u=vn((0,r.useState)(!1),2),c=u[0],s=u[1];(0,r.useEffect)((function(){var e=function(){var e,t=(e=mn().mark((function e(){var t;return mn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.get(Oe.UserProfile);case 3:t=e.sent,n(t.data.userProfile),e.next=9;break;case 7:e.prev=7,e.t0=e.catch(0);case 9:case"end":return e.stop()}}),e,null,[[0,7]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){yn(a,n,o,i,l,"next",e)}function l(e){yn(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();o&&e()}),[]);var f=function(){l(!i)},d=function(){s(!c)};return o?t?r.createElement("div",{className:"d-flex justify-content-center align-items-center mt-3 mb-3"},r.createElement("div",{className:"px-4 pb-4 shadow-sm bg-dark mx-auto rounded",style:{width:"500px",maxWidth:"500px"}},r.createElement("h4",{className:"text-center mb-3 mt-3 pt-3 pb-3 text-light"},"Hello ",t.userName),r.createElement("div",{className:"form-group d-grid col-6 mx-auto mb-3"},r.createElement("button",{onClick:f,className:"btn btn-secondary mb-3"},"Change profile information"),r.createElement("button",{onClick:d,className:"btn btn-secondary"},"Change password"))),r.createElement(on,{isOpen:i,toggleModal:f,updateUsername:function(e){n((function(t){return hn(hn({},t),{},{userName:e})}))},currentUsername:t.userName}),r.createElement(fn,{isOpen:c,toggleModal:d})):r.createElement(hr,null):r.createElement(Br,null)},wn=function(){return r.createElement("footer",{className:"border-top footer text-muted mt-auto p-3"},r.createElement("div",{className:"container text-center"},"© 2023 - The Blog"))},En={Admin:"Admin",ArticleWriter:"ArticleWriter",ArticleRater:"ArticleRater",ArticleCommentator:"ArticleCommentator"};function xn(e){return xn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xn(e)}function Sn(){Sn=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==xn(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(xn(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function kn(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}const On=function(){var e=(0,r.useContext)(Se),t=e.isAuthenticated,n=e.logout,o=e.userRoles,a=K(),i=o.includes(En.Admin),l=function(){var e,t=(e=Sn().mark((function e(t){var r,o;return Sn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),console.log(Oe.Logout),e.next=5,pr.post(Oe.Logout,{});case 5:return r=e.sent,e.next=8,r.data;case 8:o=e.sent,console.log(o),o.success&&(n(),a(we.Home));case 11:case"end":return e.stop()}}),e)})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){kn(a,n,o,i,l,"next",e)}function l(e){kn(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return r.createElement("header",null,r.createElement("nav",{className:"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow"},r.createElement("div",{className:"container-fluid"},r.createElement(ve,{className:"navbar-brand",to:we.Home},"The Blog"),i?r.createElement(r.Fragment,null,r.createElement(ve,{className:"navbar-brand",to:we.AllUsers},"User Management"),r.createElement(ve,{className:"navbar-brand",to:we.ReportedComments},"Reported Comments")):r.createElement(ve,{className:"navbar-brand",to:we.Articles},"Articles"),r.createElement("button",{className:"navbar-toggler",type:"button","data-bs-toggle":"collapse","data-bs-target":".navbar-collapse","aria-controls":"navbarSupportedContent","aria-expanded":"false","aria-label":"Toggle navigation"},r.createElement("span",{className:"navbar-toggler-icon"})),r.createElement("div",{className:"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse"},r.createElement("ul",{className:"navbar-nav"},t&&r.createElement(r.Fragment,null,r.createElement("li",{className:"nav-item"},r.createElement(ve,{className:"nav-link text-dark",to:we.UserProfile},"Profile")),r.createElement("li",{className:"nav-item"},r.createElement(ve,{className:"nav-link text-dark",onClick:function(e){return l(e)}},"Logout"))),!t&&r.createElement(r.Fragment,null,r.createElement("li",{className:"nav-item"},r.createElement(ve,{className:"nav-link text-dark",to:we.Login},"Login")),r.createElement("li",{className:"nav-item"},r.createElement(ve,{className:"nav-link text-dark",to:we.Registration},"Register"))))))))};function Nn(e){return Nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nn(e)}function Ln(){Ln=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Nn(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Nn(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Pn(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function jn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return _n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_n(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Cn=function(){var e=(0,r.useContext)(Se),t=e.isAuthenticated,n=e.userRoles,o=jn((0,r.useState)([]),2),a=o[0],i=o[1],l=jn((0,r.useState)(!0),2),u=l[0],c=l[1],s=jn((0,r.useState)(!1),2),f=s[0],d=s[1];return(0,r.useEffect)((function(){var e=function(){var e,t=(e=Ln().mark((function e(){var t,r;return Ln().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,c(!0),d(!1),e.next=5,pr.get(Oe.UserProfiles);case 5:t=e.sent,r=t.data,i(r.allUserProfiles||[]),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),d(!0);case 13:return e.prev=13,c(!1),e.finish(13);case 16:case"end":return e.stop()}}),e,null,[[0,10,13,16]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Pn(a,n,o,i,l,"next",e)}function l(e){Pn(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();t&&n.includes(En.Admin)&&e()}),[t,n]),t&&n.includes(En.Admin)?u?r.createElement(hr,null):f?r.createElement("div",{className:"container"},r.createElement("div",{className:"row justify-content-center mt-4"},r.createElement("div",{className:"col-auto"},r.createElement("div",{className:"alert alert-danger",style:{width:"500px"},role:"alert"},"User fetching failed.")))):r.createElement("div",{className:"container"},r.createElement("div",{className:"row justify-content-center align-items-center",style:{minHeight:"100vh"}},r.createElement("div",{className:"col-md-auto",style:{width:"500px"}},r.createElement("ul",{className:"list-group"},r.createElement("li",{className:"list-group-item d-flex justify-content-between"},r.createElement("strong",null,"Username"),r.createElement("strong",null,"Actions")),a.map((function(e){return r.createElement("li",{key:e.id,className:"list-group-item d-flex justify-content-between align-items-center"},e.userName,r.createElement(ve,{to:we.ChangePermissions.replace(":username",e.userName),className:"btn btn-primary"},"Change Permissions"))})))))):r.createElement(Br,null)};function Tn(e){return Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tn(e)}function An(){An=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Tn(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Tn(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Rn(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Fn(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function In(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Fn(Object(r),!0).forEach((function(t){Un(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Fn(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Un(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==Tn(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Tn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tn(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Dn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?zn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Mn=function(e){var t=e.show,n=e.handleClose,o=e.handleSave,a=Dn((0,r.useState)({title:"",description:"",image:null}),2),i=a[0],l=a[1],u=Dn((0,r.useState)(""),2),c=u[0],s=u[1],f=function(e){"image"===e.target.name?l(In(In({},i),{},{image:e.target.files[0]})):l(In(In({},i),{},Un({},e.target.name,e.target.value)))},d=function(){var e,t=(e=An().mark((function e(t){var r,a,l,u,c;return An().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),i.title){e.next=4;break}return s("Title is required"),e.abrupt("return");case 4:if(!i.image||["image/png","image/jpeg","image/gif"].includes(i.image.type)){e.next=7;break}return s("Only PNG, JPEG, and GIF files are allowed"),e.abrupt("return");case 7:if(r=null,a="",!i.image){e.next=17;break}return a=i.image.type.split("/")[1],e.next=13,p(i.image);case 13:if(r=e.sent){e.next=17;break}return s("Error in processing the image file"),e.abrupt("return");case 17:return l={Title:i.title,Description:i.description||"",ImageBase64Encoded:r,ImageType:a},e.prev=18,e.next=21,pr.post("/Article/Article",JSON.stringify(l),{headers:{"Content-Type":"application/json"}});case 21:u=e.sent,c=u.data,console.log(c),c.articleWasAdded?(o(l.Title,c.articleId),n()):s("Failed to add article"),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(18),s("Failed to add article. Try again later!");case 30:case"end":return e.stop()}}),e,null,[[18,27]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Rn(a,n,o,i,l,"next",e)}function l(e){Rn(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),p=function(e){return new Promise((function(t,r){var n=new FileReader;n.onloadend=function(){t(n.result)},n.onerror=r,n.readAsDataURL(e)}))};return t?r.createElement("div",{className:"modal show",style:{display:"block",backgroundColor:"rgba(0, 0, 0, 0.5)"}},r.createElement("div",{className:"modal-dialog modal-lg modal-dialog-centered"},r.createElement("div",{className:"modal-content"},c&&r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-md-10 offset-md-1 text-center"},r.createElement("div",{className:"alert alert-danger mt-3",style:{width:"95%",margin:"0 auto"}},c))),r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Add Article"),r.createElement("button",{type:"button",className:"close",onClick:n},r.createElement("span",null,"×"))),r.createElement("div",{className:"modal-body"},r.createElement("form",{onSubmit:d},r.createElement("div",{className:"form-group mb-3"},r.createElement("label",null,"Title"),r.createElement("input",{type:"text",className:"form-control",name:"title",required:!0,value:i.title,onChange:f})),r.createElement("div",{className:"form-group mb-3"},r.createElement("label",null,"Description"),r.createElement("textarea",{className:"form-control",rows:"3",name:"description",value:i.description,onChange:f})),r.createElement("div",{className:"form-group mb-3"},r.createElement("label",{className:"d-block mb-2"},"Upload Image:"),r.createElement("input",{type:"file",className:"form-control-file d-block",accept:"image/png, image/jpeg, image/gif",name:"image",onChange:f})),r.createElement("button",{type:"submit",className:"btn btn-primary w-100/"},"Add Article")))))):null};function Bn(e){return Bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bn(e)}function Gn(){Gn=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Bn(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Bn(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function $n(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Wn(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Hn(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Wn(Object(r),!0).forEach((function(t){Vn(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Wn(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Vn(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==Bn(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Bn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Bn(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function qn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Qn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Qn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Yn=function(e){var t=e.show,n=e.handleClose,o=e.handleSave,a=e.selectedArticleId,i=qn((0,r.useState)({title:"",description:"",image:null}),2),l=i[0],u=i[1],c=qn((0,r.useState)(""),2),s=c[0],f=c[1],d=function(e){"image"===e.target.name?u(Hn(Hn({},l),{},{image:e.target.files[0]})):u(Hn(Hn({},l),{},Vn({},e.target.name,e.target.value)))},p=function(){var e,t=(e=Gn().mark((function e(t){var r,i,u;return Gn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),l.title){e.next=4;break}return f("Title is required"),e.abrupt("return");case 4:if(!l.image||["image/png","image/jpeg","image/gif"].includes(l.image.type)){e.next=7;break}return f("Only PNG, JPEG, and GIF files are allowed"),e.abrupt("return");case 7:if(r=null,i="",!l.image){e.next=17;break}return i=l.image.type.split("/")[1],e.next=13,h(l.image);case 13:if(r=e.sent){e.next=17;break}return f("Error in processing the image file"),e.abrupt("return");case 17:return u={Id:a,Title:l.title,Description:l.description||"",ImageBase64Encoded:r,ImageType:i},e.prev=18,e.next=21,pr.patch("/Article/Article",JSON.stringify(u),{headers:{"Content-Type":"application/json"}});case 21:e.sent.data.articleWasEdited?(o(u),n()):f("Failed to edit article"),e.next=29;break;case 26:e.prev=26,e.t0=e.catch(18),f("Failed to edit article. Try again later!");case 29:case"end":return e.stop()}}),e,null,[[18,26]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){$n(a,n,o,i,l,"next",e)}function l(e){$n(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),h=function(e){return new Promise((function(t,r){var n=new FileReader;n.onloadend=function(){t(n.result)},n.onerror=r,n.readAsDataURL(e)}))};return t?r.createElement("div",{className:"modal show",style:{display:"block",backgroundColor:"rgba(0, 0, 0, 0.5)"}},r.createElement("div",{className:"modal-dialog modal-lg modal-dialog-centered"},r.createElement("div",{className:"modal-content"},s&&r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-md-10 offset-md-1 text-center"},r.createElement("div",{className:"alert alert-danger mt-3",style:{width:"95%",margin:"0 auto"}},s))),r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Edit Article"),r.createElement("button",{type:"button",className:"close",onClick:n},r.createElement("span",null,"×"))),r.createElement("div",{className:"modal-body"},r.createElement("form",{onSubmit:p},r.createElement("div",{className:"form-group mb-3"},r.createElement("label",null,"Title"),r.createElement("input",{type:"text",className:"form-control",name:"title",required:!0,value:l.title,onChange:d})),r.createElement("div",{className:"form-group mb-3"},r.createElement("label",null,"Description"),r.createElement("textarea",{className:"form-control",rows:"3",name:"description",value:l.description,onChange:d})),r.createElement("div",{className:"form-group mb-3"},r.createElement("label",{className:"d-block mb-2"},"Upload Image:"),r.createElement("input",{type:"file",className:"form-control-file d-block",accept:"image/png, image/jpeg, image/gif",name:"image",onChange:d})),r.createElement("button",{type:"submit",className:"btn btn-primary w-100/"},"Edit Article")))))):null};function Kn(e){return Kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kn(e)}function Jn(){Jn=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Kn(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Kn(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Xn(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Zn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const eo=function(e){var t,n,o=e.show,a=e.handleClose,i=e.handleDelete,l=e.articleId,u=(t=(0,r.useState)(""),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Zn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Zn(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0],s=u[1],f=function(){var e,t=(e=Jn().mark((function e(){return Jn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.delete("/Article/Article/?id=".concat(l));case 3:e.sent.data.articleWasRemoved?(i(l),a()):s("Failed deleting article. Try again later!"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),s("Error deleting article");case 11:case"end":return e.stop()}}),e,null,[[0,8]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Xn(a,n,o,i,l,"next",e)}function l(e){Xn(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return o?r.createElement("div",{className:"modal show",style:{display:"block",backgroundColor:"rgba(0, 0, 0, 0.5)"}},r.createElement("div",{className:"modal-dialog modal-dialog-centered"},r.createElement("div",{className:"modal-content"},c&&r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-md-10 offset-md-1 text-center"},r.createElement("div",{className:"alert alert-danger mt-3",style:{width:"95%",margin:"0 auto"}},c))),r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Confirm Deletion"),r.createElement("button",{type:"button",className:"close",onClick:a},r.createElement("span",null,"×"))),r.createElement("div",{className:"modal-body"},"Are you sure you want to delete this article?"),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-secondary",onClick:a},"Cancel"),r.createElement("button",{type:"button",className:"btn btn-danger",onClick:f},"Delete"))))):null};function to(e){return to="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},to(e)}function ro(){ro=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==to(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(to(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function no(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function oo(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){no(a,n,o,i,l,"next",e)}function l(e){no(a,n,o,i,l,"throw",e)}i(void 0)}))}}function ao(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function io(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ao(Object(r),!0).forEach((function(t){var n,o,a;n=e,o=t,a=r[t],(o=function(e){var t=function(e,t){if("object"!==to(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==to(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===to(t)?t:String(t)}(o))in n?Object.defineProperty(n,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ao(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function lo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||uo(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uo(e,t){if(e){if("string"==typeof e)return co(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?co(e,t):void 0}}function co(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const so=function(){var e=(0,r.useContext)(Se),t=e.isAuthenticated,n=e.username,o=e.userRoles,a=lo((0,r.useState)([]),2),i=a[0],l=a[1],u=lo((0,r.useState)(!1),2),c=u[0],s=u[1],f=lo((0,r.useState)(""),2),d=f[0],p=f[1],h=lo((0,r.useState)(!1),2),m=h[0],y=h[1],v=lo((0,r.useState)(!1),2),g=v[0],b=v[1],w=lo((0,r.useState)(!1),2),E=w[0],x=w[1],S=lo((0,r.useState)(-1),2),k=S[0],O=S[1],N=lo((0,r.useState)(-1),2),L=N[0],P=N[1],j=lo((0,r.useState)(!1),2),_=j[0],C=j[1],T=Q(),A=new URLSearchParams(T.search).get("title"),R="null"===A||null===A?"":A,F=function(){var e=oo(ro().mark((function e(t){var r,n,o,a,u,c;return ro().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!_){e.next=2;break}return e.abrupt("return");case 2:if(C(!0),r=i.find((function(e){return e.id===t}))){e.next=7;break}return C(!1),e.abrupt("return");case 7:if(n=!r.likedByUser,a={articleId:t,likedByUser:n,dislikedByUser:o=!1},e.prev=10,r.likedByUser||r.dislikedByUser){e.next=17;break}return e.next=14,pr.post("/ArticleUserRating/Add",a);case 14:c=e.sent,e.next=26;break;case 17:if(!r.dislikedByUser){e.next=23;break}return e.next=20,pr.put("/ArticleUserRating/Update",a);case 20:c=e.sent,e.next=26;break;case 23:return e.next=25,pr.delete("/ArticleUserRating/Delete",{params:{articleId:t}});case 25:c=e.sent;case 26:u=c.data,e.next=34;break;case 29:return e.prev=29,e.t0=e.catch(10),console.error("Error updating article rating",e.t0),C(!1),e.abrupt("return");case 34:if(u.success){e.next=37;break}return C(!1),e.abrupt("return");case 37:l((function(e){return e.map((function(e){return e.id===t?io(io({},e),{},{rating:n?e.dislikedByUser?e.rating+2:e.rating+1:e.rating-1,likedByUser:n,dislikedByUser:o}):e}))})),C(!1);case 39:case"end":return e.stop()}}),e,null,[[10,29]])})));return function(t){return e.apply(this,arguments)}}(),I=function(){var e=oo(ro().mark((function e(t){var r,n,o,a,u,c;return ro().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!_){e.next=2;break}return e.abrupt("return");case 2:if(C(!0),r=i.find((function(e){return e.id===t}))){e.next=7;break}return C(!1),e.abrupt("return");case 7:if(n=!1,o=!r.dislikedByUser,a={articleId:t,likedByUser:n,dislikedByUser:o},e.prev=10,r.dislikedByUser||r.likedByUser){e.next=17;break}return e.next=14,pr.post("/ArticleUserRating/Add",a);case 14:c=e.sent,e.next=27;break;case 17:if(!r.likedByUser){e.next=23;break}return e.next=20,pr.put("/ArticleUserRating/Update",a);case 20:c=e.sent,e.next=27;break;case 23:if(!r.dislikedByUser){e.next=27;break}return e.next=26,pr.delete("/ArticleUserRating/Delete",{params:{articleId:t}});case 26:c=e.sent;case 27:u=c.data,e.next=35;break;case 30:return e.prev=30,e.t0=e.catch(10),console.error("Error updating article rating",e.t0),C(!1),e.abrupt("return");case 35:if(u.success){e.next=38;break}return C(!1),e.abrupt("return");case 38:l((function(e){return e.map((function(e){return e.id===t?io(io({},e),{},{rating:o?e.likedByUser?e.rating-2:e.rating-1:e.rating+1,likedByUser:n,dislikedByUser:o}):e}))})),C(!1);case 40:case"end":return e.stop()}}),e,null,[[10,30]])})));return function(t){return e.apply(this,arguments)}}();return(0,r.useEffect)((function(){var e=function(){var e=oo(ro().mark((function e(){var t;return ro().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,s(!0),e.next=4,pr.get("".concat(Oe.Articles,"?titleFilter=").concat(R));case 4:t=e.sent,l(t.data.articles),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),p("Failed to load articles");case 11:return e.prev=11,s(!1),e.finish(11);case 14:case"end":return e.stop()}}),e,null,[[0,8,11,14]])})));return function(){return e.apply(this,arguments)}}();e()}),[]),c?r.createElement("p",null,"Loading..."):d?r.createElement("p",null,d):r.createElement(r.Fragment,null,r.createElement("h1",{className:"text-center mt-4"},"Articles"),r.createElement("div",{className:"container mt-4",style:{maxWidth:"600px"}},t&&o.includes(En.ArticleWriter)&&r.createElement("button",{className:"btn btn-primary mb-3",onClick:function(){return y(!0)}},"Add Article"),r.createElement("div",{className:"d-flex justify-content-between mb-2"},r.createElement("span",{style:{flex:3}},"Title"),r.createElement("span",{style:{flex:2}},"Author"),r.createElement("span",{style:{flex:2}},"Rating"),r.createElement("span",{style:{flex:2}},"Actions")),r.createElement("ul",{className:"list-group"},i.map((function(e){return r.createElement("li",{key:e.id,className:"list-group-item my-2 border-top"},r.createElement("div",{className:"d-flex justify-content-between align-items-center"},r.createElement(ve,{to:we.Article.replace(":articleId",e.id),className:"text-truncate",style:{flex:3}},e.title),r.createElement("p",{style:{flex:2}},e.author),r.createElement("div",{style:{flex:2},className:"d-flex align-items-center"},t&&o.includes(En.ArticleRater)?r.createElement(r.Fragment,null,r.createElement("button",{className:"btn ".concat(e.likedByUser?"btn-success":"btn-outline-success"," btn-sm mx-1"),onClick:function(){return F(e.id)}},"+"),r.createElement("span",null,e.rating),r.createElement("button",{className:"btn ".concat(e.dislikedByUser?"btn-danger":"btn-outline-danger"," btn-sm mx-1"),onClick:function(){return I(e.id)}},"-")):r.createElement(r.Fragment,null,r.createElement("button",{className:"btn btn-outline-success btn-sm mx-1",disabled:!0},"+"),r.createElement("span",null,e.rating),r.createElement("button",{className:"btn btn-outline-danger btn-sm mx-1",disabled:!0},"-"))),e.author===n||o.includes(En.Admin)?r.createElement("div",{style:{flex:2},className:"d-flex"},r.createElement("button",{className:"btn btn-secondary btn-sm me-1",onClick:function(){O(e.id),b(!0)}},"Edit"),r.createElement("button",{className:"btn btn-danger btn-sm",onClick:function(){P(e.id),x(!0)}},"Remove")):r.createElement("div",{style:{flex:2}})))})))),r.createElement(Mn,{show:m,handleClose:function(){return y(!1)},handleSave:function(e,t){var r={id:t,title:e,author:n,rating:0,likedByUser:!1,dislikedByUser:!1};l((function(e){return[].concat(function(e){if(Array.isArray(e))return co(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||uo(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[r]);var t}))}}),r.createElement(Yn,{show:g,handleClose:function(){return b(!1)},handleSave:function(e){l((function(t){return t.map((function(t){return t.id===e.Id?io(io({},t),{},{title:e.Title,description:e.Description}):t}))}))},selectedArticleId:k}),r.createElement(eo,{show:E,handleClose:function(){return x(!1)},handleDelete:function(e){l((function(t){return t.filter((function(t){return t.id!==e}))}))},articleId:L}))};function fo(e){return fo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fo(e)}function po(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ho(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?po(Object(r),!0).forEach((function(t){var n,o,a;n=e,o=t,a=r[t],(o=function(e){var t=function(e,t){if("object"!==fo(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==fo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===fo(t)?t:String(t)}(o))in n?Object.defineProperty(n,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):po(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function mo(e){return function(e){if(Array.isArray(e))return Eo(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||wo(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yo(){yo=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==fo(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(fo(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function vo(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function go(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){vo(a,n,o,i,l,"next",e)}function l(e){vo(a,n,o,i,l,"throw",e)}i(void 0)}))}}function bo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||wo(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wo(e,t){if(e){if("string"==typeof e)return Eo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Eo(e,t):void 0}}function Eo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const xo=function(){var e=(0,r.useContext)(Se),t=e.isAuthenticated,n=e.userRoles,o=J().username,a=bo((0,r.useState)(!0),2),i=a[0],l=a[1],u=bo((0,r.useState)(null),2),c=u[0],s=u[1],f=bo((0,r.useState)([]),2),d=f[0],p=f[1],h=bo((0,r.useState)([]),2),m=h[0],y=h[1],v=bo((0,r.useState)([]),2),g=v[0],b=v[1],w=bo((0,r.useState)(!1),2),E=w[0],x=w[1],S=bo((0,r.useState)(""),2),k=S[0],O=S[1],N=bo((0,r.useState)(!1),2),L=N[0],P=N[1];(0,r.useEffect)((function(){var e=function(){var e=go(yo().mark((function e(){var t,r;return yo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.get(Oe.ProfileWithRoles.replace(":username",o));case 3:t=e.sent,r=t.data,s(r.userProfile),p(r.userProfile.roles),P(!0),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),O("Failed to get user roles.");case 13:return e.prev=13,l(!1),e.finish(13);case 16:case"end":return e.stop()}}),e,null,[[0,10,13,16]])})));return function(){return e.apply(this,arguments)}}();e()}),[o]),(0,r.useEffect)((function(){y([]),b([])}),[n]);var j=function(){var e=go(yo().mark((function e(){var t;return yo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==m.length||0!==g.length){e.next=5;break}O("No roles were changed."),x(!0),e.next=11;break;case 5:return t={UserName:o,RolesToAdd:m,RolesToRemove:g},e.next=8,pr.post(Oe.ChangePermissions,t);case 8:e.sent.data.success?(s((function(e){return ho(ho({},e),{},{roles:[].concat(mo(e.roles.filter((function(e){return!g.includes(e)}))),mo(m))})})),p((function(e){return[].concat(mo(e.filter((function(e){return!g.includes(e)}))),mo(m))})),O("Roles updated successfully.")):O("Failed to update roles."),x(!0);case 11:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return i?r.createElement(hr,null):t&&n.includes(En.Admin)&&L?r.createElement("div",{className:"d-flex justify-content-center align-items-center",style:{height:"100vh"}},r.createElement("div",{className:"border border-1 rounded-2 p-3"},r.createElement("h1",{className:"mb-3"},"User: ",null==c?void 0:c.userName),E&&r.createElement("div",{className:"alert alert-info mb-3",role:"alert"},k),r.createElement("div",null,Object.values(En).map((function(e,t){return r.createElement("div",{key:t,className:"form-check"},r.createElement("input",{className:"form-check-input",type:"checkbox",checked:d.includes(e),onChange:function(t){return function(e,t){t?(b((function(t){return t.filter((function(t){return t!==e}))})),c.roles.includes(e)?y((function(t){return t.filter((function(t){return t!==e}))})):y((function(t){return[].concat(mo(t),[e])}))):(y((function(t){return t.filter((function(t){return t!==e}))})),c.roles.includes(e)?b((function(t){return[].concat(mo(t),[e])})):b((function(t){return t.filter((function(t){return t!==e}))}))),p(t?[].concat(mo(d),[e]).filter((function(e,t,r){return r.indexOf(e)===t})):d.filter((function(t){return t!==e})))}(e,t.target.checked)},id:"role-".concat(t)}),r.createElement("label",{className:"form-check-label",htmlFor:"role-".concat(t)},e))}))),r.createElement("button",{className:"btn btn-primary d-block w-100 mt-3",onClick:j},"Change Roles"))):r.createElement(Br,null)};function So(e){return So="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},So(e)}function ko(){ko=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==So(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(So(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Oo(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function No(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Lo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Lo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Po=function(e){var t=e.show,n=e.handleClose,o=e.handleSave,a=e.initialDescription,i=e.commentIdToEdit,l=No((0,r.useState)(a),2),u=l[0],c=l[1],s=No((0,r.useState)(""),2),f=s[0],d=s[1],p=No((0,r.useState)("".concat(a.length,"/500")),2),h=p[0],m=p[1],y=No((0,r.useState)(a.length>500||a.lenght<=0),2),v=y[0],g=y[1];(0,r.useEffect)((function(){c(a||"")}),[a]),(0,r.useEffect)((function(){var e=u.length;m("".concat(e,"/500")),g(0===e||e>500)}),[u]);var b=function(){var e,t=(e=ko().mark((function e(t){var r,a,l;return ko().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),u){e.next=4;break}return d("Description is required"),e.abrupt("return");case 4:return r={CommentId:i,Text:u},e.prev=5,e.next=8,pr.put("/ArticleComment/ArticleComment",r);case 8:a=e.sent,l=a.data,console.log(l),l.success?(o(r),n()):d("Failed to edit article"),e.next=17;break;case 14:e.prev=14,e.t0=e.catch(5),d("Failed to edit article. Try again later!");case 17:case"end":return e.stop()}}),e,null,[[5,14]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Oo(a,n,o,i,l,"next",e)}function l(e){Oo(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t?r.createElement("div",{className:"modal show",style:{display:"block",backgroundColor:"rgba(0, 0, 0, 0.5)"}},r.createElement("div",{className:"modal-dialog modal-lg modal-dialog-centered"},r.createElement("div",{className:"modal-content"},f&&r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-md-10 offset-md-1 text-center"},r.createElement("div",{className:"alert alert-danger mt-3",style:{width:"95%",margin:"0 auto"}},f))),r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Edit Article"),r.createElement("button",{type:"button",className:"close",onClick:n},r.createElement("span",null,"×"))),r.createElement("div",{className:"modal-body"},r.createElement("form",{onSubmit:b},r.createElement("div",{className:"form-group mb-3"},r.createElement("label",null,"Description"),r.createElement("textarea",{className:"form-control",rows:"5",value:u,onChange:function(e){var t=e.target.value;t.length<=500&&c(t)}}),r.createElement("div",{className:"text-right mt-2"},r.createElement("small",null,h))),r.createElement("button",{type:"submit",className:"btn btn-primary w-100",disabled:v},"Edit Article")))))):null};function jo(e){return jo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jo(e)}function _o(){_o=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==jo(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(jo(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Co(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function To(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Ao=function(e){var t,n,o=e.show,a=e.handleClose,i=e.handleDelete,l=e.commentId,u=(t=(0,r.useState)(""),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return To(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?To(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0],s=u[1],f=function(){var e,t=(e=_o().mark((function e(){return _o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.delete("/ArticleComment/ArticleComment/?commentId=".concat(l));case 3:e.sent.data.success?(i(l),a()):s("Failed deleting article. Try again later!"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),s("Error deleting article");case 11:case"end":return e.stop()}}),e,null,[[0,8]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Co(a,n,o,i,l,"next",e)}function l(e){Co(a,n,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return o?r.createElement("div",{className:"modal show",style:{display:"block",backgroundColor:"rgba(0, 0, 0, 0.5)"}},r.createElement("div",{className:"modal-dialog modal-dialog-centered"},r.createElement("div",{className:"modal-content"},c&&r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-md-10 offset-md-1 text-center"},r.createElement("div",{className:"alert alert-danger mt-3",style:{width:"95%",margin:"0 auto"}},c))),r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Confirm Deletion"),r.createElement("button",{type:"button",className:"close",onClick:a},r.createElement("span",null,"×"))),r.createElement("div",{className:"modal-body"},"Are you sure you want to delete this comment?"),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-secondary",onClick:a},"Cancel"),r.createElement("button",{type:"button",className:"btn btn-danger",onClick:f},"Delete"))))):null};function Ro(e){return Ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ro(e)}function Fo(){Fo=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Ro(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Ro(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Io(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Uo(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Io(a,n,o,i,l,"next",e)}function l(e){Io(a,n,o,i,l,"throw",e)}i(void 0)}))}}function Do(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?zo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Mo=function(e){var t=e.show,n=e.handleClose,o=e.handleSave,a=e.reportCommentIdToEdit,i=Do((0,r.useState)(""),2),l=i[0],u=i[1],c=Do((0,r.useState)(""),2),s=c[0],f=c[1],d=Do((0,r.useState)("".concat(l.length,"/500")),2),p=d[0],h=d[1],m=Do((0,r.useState)(l.length>500||l.lenght<=0),2),y=m[0],v=m[1];(0,r.useEffect)((function(){t&&Uo(Fo().mark((function e(){var t,r;return Fo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.get("/ArticleComment/UserReportedCommentViewModel?commentId=".concat(a));case 3:t=e.sent,null!==(r=t.data.userReportedCommentViewModel)?u(r.reason||""):console.log("not success"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),console.log("Failed");case 11:case"end":return e.stop()}}),e,null,[[0,8]])})))()}),[a]),(0,r.useEffect)((function(){var e=l.length;h("".concat(e,"/500")),v(0===e||e>500)}),[l]);var g=function(){var e=Uo(Fo().mark((function e(t){var r;return Fo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),l){e.next=4;break}return f("Reason is required"),e.abrupt("return");case 4:return r={CommentId:a,Reason:l},e.prev=5,e.next=8,pr.post("/ArticleComment/ReportComment",r);case 8:e.sent.data.success?(o(r),n()):f("Failed to report comment"),e.next=16;break;case 13:e.prev=13,e.t0=e.catch(5),f("Failed to report comment. Try again later!");case 16:case"end":return e.stop()}}),e,null,[[5,13]])})));return function(t){return e.apply(this,arguments)}}();return t?r.createElement("div",{className:"modal show",style:{display:"block",backgroundColor:"rgba(0, 0, 0, 0.5)"}},r.createElement("div",{className:"modal-dialog modal-lg modal-dialog-centered"},r.createElement("div",{className:"modal-content"},s&&r.createElement("div",{className:"row"},r.createElement("div",{className:"col-12 col-md-10 offset-md-1 text-center"},r.createElement("div",{className:"alert alert-danger mt-3",style:{width:"95%",margin:"0 auto"}},s))),r.createElement("div",{className:"modal-header"},r.createElement("h5",{className:"modal-title"},"Report Comment"),r.createElement("button",{type:"button",className:"close",onClick:n},r.createElement("span",null,"×"))),r.createElement("div",{className:"modal-body"},r.createElement("form",{onSubmit:g},r.createElement("div",{className:"form-group mb-3"},r.createElement("label",null,"Reason For Report"),r.createElement("textarea",{className:"form-control",rows:"5",value:l,onChange:function(e){var t=e.target.value;t.length<=500&&u(t)}}),r.createElement("div",{className:"text-right mt-2"},r.createElement("small",null,p))),r.createElement("button",{type:"submit",className:"btn btn-primary w-100",disabled:y},"Report Comment")))))):null};function Bo(e){return Bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bo(e)}function Go(){Go=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Bo(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Bo(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function $o(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Wo(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){$o(a,n,o,i,l,"next",e)}function l(e){$o(a,n,o,i,l,"throw",e)}i(void 0)}))}}function Ho(e){return function(e){if(Array.isArray(e))return Qo(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||qo(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||qo(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qo(e,t){if(e){if("string"==typeof e)return Qo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Qo(e,t):void 0}}function Qo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Yo=function(){var e=(0,r.useContext)(Se),t=e.isAuthenticated,n=e.username,o=e.userRoles,a=Vo((0,r.useState)(null),2),i=a[0],l=a[1],u=Vo((0,r.useState)([]),2),c=u[0],s=u[1],f=Vo((0,r.useState)(!0),2),d=f[0],p=f[1],h=Vo((0,r.useState)(null),2),m=h[0],y=h[1],v=Vo((0,r.useState)(""),2),g=v[0],b=v[1],w=J().articleId,E=Vo((0,r.useState)(!1),2),x=E[0],S=E[1],k=Vo((0,r.useState)(""),2),O=k[0],N=k[1],L=Vo((0,r.useState)(-1),2),P=L[0],j=L[1],_=Vo((0,r.useState)(-1),2),C=_[0],T=_[1],A=Vo((0,r.useState)(!1),2),R=A[0],F=A[1],I=Vo((0,r.useState)(!1),2),U=I[0],D=I[1],z=Vo((0,r.useState)(-1),2),M=z[0],B=z[1],G=function(){var e=Wo(Go().mark((function e(){var t,r,o,a;return Go().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t={ArticleId:w,Text:g},e.next=3,pr.post("/ArticleComment/ArticleComment",t);case 3:r=e.sent,(o=r.data).success?(a={id:o.commentId,author:n,text:g},s([].concat(Ho(c),[a]))):console.log("Failed submitting");case 6:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return(0,r.useEffect)((function(){var e=function(){var e=Wo(Go().mark((function e(){var t,r,n;return Go().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pr.get("/Article/Article?articleId=".concat(w));case 3:t=e.sent,r=t.data.article,n={author:r.author,description:r.description,id:r.id,imageBase64Encoded:r.imageBase64Encoded,title:r.title},console.log(r.comments),l(n),s(r.comments),console.log(c),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(0),y("Error fetching article");case 15:return e.prev=15,p(!1),e.finish(15);case 18:case"end":return e.stop()}}),e,null,[[0,12,15,18]])})));return function(){return e.apply(this,arguments)}}();w&&e()}),[w]),d?r.createElement(hr,null):m?r.createElement("p",null,m):i?r.createElement("div",{className:"justify-content-center mt-4 mb-4"},r.createElement("div",{className:"card",style:{maxWidth:"500px",margin:"0 auto"}},r.createElement("div",{className:"card-body text-center"},r.createElement("h1",{className:"card-title"},i.title)),i.imageBase64Encoded&&r.createElement("img",{src:i.imageBase64Encoded,className:"img-fluid rounded mx-auto d-block",alt:"Article",style:{maxWidth:"80%"}}),r.createElement("div",{className:"card-body"},i.description&&r.createElement("p",{className:"card-text"},i.description))),r.createElement("div",{className:"mt-4",style:{maxWidth:"500px",margin:"0 auto"}},r.createElement("h3",{className:"text-center"},"Comments"),c.map((function(e){return r.createElement("div",{key:e.id,className:"card mb-3"},r.createElement("div",{className:"card-body d-flex justify-content-between"},r.createElement("div",null,r.createElement("h5",{className:"card-title"},e.author),r.createElement("p",{className:"card-text"},e.text)),r.createElement("div",{className:"d-flex flex-column"},(e.author===n||o.includes(En.Admin))&&r.createElement(r.Fragment,null,r.createElement("button",{className:"btn btn-sm btn-primary mb-2",onClick:function(){return function(e){N(e.text),j(e.id),S(!0)}(e)}},"Edit"),r.createElement("button",{className:"btn btn-sm btn-danger mb-2",onClick:function(){return t=e.id,T(t),void F(!0);var t}},"Remove")),e.author!==n&&t&&r.createElement("button",{className:"btn btn-sm btn-warning mb-2",onClick:function(){return t=e.id,B(t),void D(!0);var t}},"Report"))))})),t&&o.includes(En.ArticleCommentator)&&r.createElement("div",{className:"mt-4"},r.createElement("small",null,g.length,"/500"),r.createElement("textarea",{className:"form-control mb-2",placeholder:"Write your comment here...",value:g,onChange:function(e){e.target.value.length<=500&&b(e.target.value)}}),r.createElement("button",{className:"btn btn-primary w-100",onClick:G,disabled:g.length>500||0===g.length},"Submit Comment"))),r.createElement(Po,{show:x,handleClose:function(){S(!1)},handleSave:function(e){var t=c.findIndex((function(t){return t.id===e.CommentId}));if(-1!==t){var r=Ho(c);r[t].text=e.Text,s(r)}},initialDescription:O,commentIdToEdit:P}),r.createElement(Ao,{show:R,handleClose:function(){F(!1)},handleDelete:function(e){s((function(t){return t.filter((function(t){return t.id!==e}))}))},commentId:C}),r.createElement(Mo,{show:U,handleClose:function(){D(!1)},handleSave:function(){console.log("comment was reported")},reportCommentIdToEdit:M})):r.createElement(Br,null)};function Ko(e){return Ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ko(e)}function Jo(){Jo=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new _(n||[]);return o(i,"_invoke",{value:N(e,r,l)}),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};c(w,i,(function(){return this}));var E=Object.getPrototypeOf,x=E&&E(E(C([])));x&&x!==r&&n.call(x,i)&&(w=x);var S=b.prototype=v.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Ko(s)&&n.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,r,n){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(n.method=a,n.arg=i;;){var l=n.delegate;if(l){var u=L(l,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var c=f(t,r,n);if("normal"===c.type){if(o=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(o=m,n.method="throw",n.arg=c.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=f(o,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var i=a.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function C(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}throw new TypeError(Ko(t)+" is not iterable")}return g.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},k(O.prototype),c(O.prototype,l,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new O(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(S),c(S,u,"Generator"),c(S,i,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=C,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return l.type="throw",l.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),j(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:C(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Xo(e,t,r,n,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void r(e)}l.done?t(u):Promise.resolve(u).then(n,o)}function Zo(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){Xo(a,n,o,i,l,"next",e)}function l(e){Xo(a,n,o,i,l,"throw",e)}i(void 0)}))}}function ea(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,l=[],u=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ta(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ta(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ta(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const ra=function(){var e=ea((0,r.useState)([]),2),t=e[0],n=e[1],o=ea((0,r.useState)(!1),2),a=o[0],i=o[1];(0,r.useEffect)((function(){var e=function(){var e=Zo(Jo().mark((function e(){var t,r;return Jo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,i(!0),e.next=4,pr.get("/ArticleComment/AllReportedComments");case 4:t=e.sent,r=t.data,console.log(r),r.reportedComments?n(r.reportedComments):console.error("No reported comments found in the response."),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error("Failed to fetch reported comments:",e.t0);case 13:return e.prev=13,i(!1),e.finish(13);case 16:case"end":return e.stop()}}),e,null,[[0,10,13,16]])})));return function(){return e.apply(this,arguments)}}();e()}),[]);var l=function(){var e=Zo(Jo().mark((function e(t){var r;return Jo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log(t),r={ReportId:t.id,CommentId:t.commentId,BlockComment:!0},e.prev=2,e.next=5,pr.patch("/ArticleComment/ChangeReportedCommentStatus",r);case 5:e.sent.data.success?n((function(e){return e.filter((function(e){return e.commentId!==t.commentId}))})):console.error("Failed to block comment"),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(2),console.error("Failed to block comment:",e.t0);case 13:case"end":return e.stop()}}),e,null,[[2,10]])})));return function(t){return e.apply(this,arguments)}}(),u=function(){var e=Zo(Jo().mark((function e(t){var r;return Jo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log(t),r={ReportId:t.id,CommentId:t.commentId,BlockComment:!1},e.prev=2,e.next=5,pr.patch("/ArticleComment/ChangeReportedCommentStatus",r);case 5:e.sent.data.success?n((function(e){return e.filter((function(e){return e.id!==t.id}))})):console.error("Failed to block comment"),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(2),console.error("Failed to block comment:",e.t0);case 13:case"end":return e.stop()}}),e,null,[[2,10]])})));return function(t){return e.apply(this,arguments)}}();return r.createElement("div",{className:"container text-center mt-5",style:{maxWidth:"600px"}},a?r.createElement(hr,null):r.createElement(r.Fragment,null,0===t.length?r.createElement("div",null,r.createElement("h1",null,"No reported comments")):r.createElement(r.Fragment,null,r.createElement("h1",null,"Reported Comments"),t.map((function(e){return r.createElement("div",{key:e.id,className:"text-left border p-3 my-3"},r.createElement("div",null,r.createElement("strong",null,"Reason For Report:"),r.createElement("textarea",{className:"form-control",value:e.reason,rows:2})),r.createElement("div",{className:"form-group mt-3"},r.createElement("label",{htmlFor:"commentText_".concat(e.id)},r.createElement("strong",null,"Reported Comment:")),r.createElement("textarea",{className:"form-control",id:"commentText_".concat(e.id),value:e.text,rows:4})),r.createElement("div",{className:"mt-4"},r.createElement("button",{style:{marginRight:"1rem",marginBottom:"1rem"},className:"btn btn-danger",onClick:function(){return l(e)}},"Block"),r.createElement("button",{style:{marginBottom:"1rem"},className:"btn btn-warning",onClick:function(){return u(e)}},"Deny")))})))))};function na(){return r.createElement(ke,null,r.createElement(he,null,r.createElement("div",{className:"d-flex flex-column vh-100"},r.createElement(On,null),r.createElement(ce,null,r.createElement(le,{path:we.Home,element:r.createElement(wr,null)}),r.createElement(le,{path:we.Login,element:r.createElement(Lr,null)}),r.createElement(le,{path:we.Registration,element:r.createElement(Rr,null)}),r.createElement(le,{path:we.ForgotPassword,element:r.createElement(Mr,null)}),r.createElement(le,{path:we.ResetPassword,element:r.createElement(Jr,null)}),r.createElement(le,{path:we.UserProfile,element:r.createElement(bn,null)}),r.createElement(le,{path:we.Articles,element:r.createElement(so,null)}),r.createElement(le,{path:we.Article,element:r.createElement(Yo,null)}),r.createElement(le,{path:we.AllUsers,element:r.createElement(Cn,null)}),r.createElement(le,{path:we.ChangePermissions,element:r.createElement(xo,null)}),r.createElement(le,{path:we.ReportedComments,element:r.createElement(ra,null)}),r.createElement(le,{path:"/*",element:r.createElement(Br,null)})),r.createElement(wn,null))))}a.render(r.createElement(na,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,